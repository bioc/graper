ngroups <- seq(1,10,1)
ngroups
n <- seq(100,2000,100)
p <- seq(100,2000,100)
g <- seq(1,10,1)
grid <- expand.grid(n=n, p=p, g=g)
nrow(grid)
n <- seq(100,2000,300)
p <- seq(100,2000,300)
g <- seq(1,10,1)
grid <- expand.grid(n=n, p=p, g=g)
nrow(grid)
n <- seq(100,2000,300)
p <- seq(100,2000,300)
g <- seq(1,10,2)
grid <- expand.grid(n=n, p=p, g=g)
nrow(grid)
n <- seq(100,1000,200)
p <- seq(100,2000,300)
g <- seq(1,10,2)
grid <- expand.grid(n=n, p=p, g=g)
nrow(grid)
grid <- expand.grid(n=n, p=p, g=g, pi_low_base, rho_base, tau_base)
## make grid
n_base <- 100
p_base <- 300
g_base <- 6
pi_low_base <- 0.2
rho_base <- 0
tau_base <- 1
n <- seq(100,1000,200)
p <- seq(100,2000,300)
g <- seq(1,10,2)
grid <- expand.grid(n=n, p=p, g=g, pi_low_base, rho_base, tau_base)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, pg==pg_base, rho==rho_base, tau==tau_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, pg==pg_base, rho==rho_base, tau==tau_base)
## make grid
n_base <- 100
p_base <- 300
g_base <- 6
pi_low_base <- 0.2
rho_base <- 0
tau_base <- 1
n <- seq(100,1000,200)
p <- seq(100,2000,300)
g <- seq(2,10,2)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho_base, tau_base)
nrow(grid)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(g
)
n_base <- 100
p_base <- 300
g_base <- 6
pi_low_base <- 0.2
rho_base <- 0
tau_base <- 1
n <- seq(100,1000,200)
p <- seq(100,2000,300)
g <- seq(2,10,2)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho_base, tau_base)
nrow(grid)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, n==n_base, rho==rho_base, tau==tau_base)
grid <- rbind(grid_n,grid_p,grid_g)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho_base, tau_base)
nrow(grid)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho = rho_base, tau =tau_base)
nrow(grid)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, n==n_base, rho==rho_base, tau==tau_base)
grid <- rbind(grid_n,grid_p,grid_g)
nrow(grid)
grid_n
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho = rho_base, tau =tau_base)
grid
dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, n==n_base, rho==rho_base, tau==tau_base)
grid_g
grid_p
p <- seq(300,2000,300)
g <- seq(2,10,2)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho = rho_base, tau =tau_base)
nrow(grid)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, n==n_base, rho==rho_base, tau==tau_base)
grid_n
grid_p
grid_g
nrow(grid)
nrow(grid)
nrow(grid)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho = rho_base, tau =tau_base)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, n==n_base, rho==rho_base, tau==tau_base)
grid <- rbind(grid_n,grid_p,grid_g)
nrow(grid)
## make grid
n_base <- 100
p_base <- 300
g_base <- 6
pi_low_base <- 0.2
rho_base <- 0
tau_base <- 1
n <- seq(100,2000,200)
p <- seq(300,5000,300)
g <- seq(2,10,2)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho = rho_base, tau =tau_base)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, n==n_base, rho==rho_base, tau==tau_base)
grid <- rbind(grid_n,grid_p,grid_g)
nrow(grid)
# get setting parameters
param <- grid[as.numeric(Sys.getenv('SLURM_ARRAY_TASK_ID')),]
g <- param$g
true.gamma <- rep(1,g)
n <- param$n
pg <- rep(round(param$p/g),g)
g
param
param <- grid[1,]
g <- param$g
true.gamma <- rep(1,g)
n <- param$n
pg <- rep(round(param$p/g),g)
pg
true.pi <- rep(c(param$pi_low ,param$pi_high), g/2)
nm <- paste0("n",n,"_p", sum(pg),
"_pil",param$pi_low,
"_rho",param$rho,
"_tau", param$tau)
print(nm)
nm <- paste0("n",n,"_p", sum(pg),
"_g",param$g)
nm
dat <- makeExampleDataWithUnequalGroups(n=n+1000, pg=pg,
gammas = true.gamma,
pis = true.pi,
rho = param$rho,
tau=param$tau)
library(grpRR)
dat <- makeExampleDataWithUnequalGroups(n=n+1000, pg=pg,
gammas = true.gamma,
pis = true.pi,
rho = param$rho,
tau=param$tau)
true.pi <- rep(c(param$pi_low ,param$pi_high), g/2)
true.gamma
true.pi
pg
c(param$pi_low ,param$pi_high)
true.pi <- rep(param$pi, g)
dat <- makeExampleDataWithUnequalGroups(n=n+1000, pg=pg,
gammas = true.gamma,
pis = true.pi,
rho = param$rho,
tau=param$tau)
dat
Xtrain <- dat$X[1:n,]
ytrain <- dat$y[1:n]
# fit on the full dat sets to evaluate estimation of parameters
fits <- runMethods(Xtrain, ytrain, dat$annot,
include_nonfacQ=TRUE, compareIPF=FALSE,
n_rep=1 , th=0.01, beta0 = dat$beta,
standardize=FALSE, compareGRridge=TRUE,
include_varbvs=TRUE)
# fit on the full dat sets to evaluate estimation of parameters
fits <- RunMethods(Xtrain, ytrain, dat$annot,
include_nonfacQ=TRUE, compareIPF=FALSE,
n_rep=1 , th=0.01, beta0 = dat$beta,
standardize=FALSE, compareGRridge=TRUE,
include_varbvs=TRUE)
runtime
runtime <- sapply(fits$summaryList, function(l) l$runtime)
runtime
# collect relevant performance meaasures
data.frame(runtime= runtime, method = names(runtime), it =it)
it <- 1
# collect relevant performance meaasures
data.frame(runtime= runtime, method = names(runtime), it =it)
setwd("~/Documents/LassoVariants/grpRR_model/grpRR_analyses/run_time")
## make grid
n_base <- 100
p_base <- 300
g_base <- 6
pi_low_base <- 0.2
rho_base <- 0
tau_base <- 1
n <- seq(100,2000,200)
p <- seq(100,5000,200)
g <- seq(2,10,2)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho = rho_base, tau =tau_base)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, n==n_base, rho==rho_base, tau==tau_base)
grid <- rbind(grid_n,grid_p,grid_g)
nrow(grid)
save(grid, file = "data/grid.RData")
## make grid
n_base <- 100
p_base <- 300
g_base <- 6
pi_low_base <- 0.2
rho_base <- 0
tau_base <- 1
n <- seq(100,2000,200)
p <- seq(100,5000,200)
g <- seq(2,10,2)
grid <- expand.grid(n=n, p=p, g=g, pi_low=pi_low_base, rho = rho_base, tau =tau_base)
grid_n <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, rho==rho_base, tau==tau_base, g == g_base)
grid_p <- dplyr::filter(grid,  pi_low==pi_low_base, n==n_base, rho==rho_base, tau==tau_base, g == g_base)
grid_g <- dplyr::filter(grid,  pi_low==pi_low_base, p==p_base, n==n_base, rho==rho_base, tau==tau_base)
grid <- rbind(grid_n,grid_p,grid_g)
nrow(grid)
save(grid, file = "data/grid.RData")
# save results
outdir <- paste0(as.character(Sys.Date()))
?runMethods
?EunMethods
?RunMethods
setwd("~/Documents/LassoVariants/grpRR_model/grpRR_analyses/run_time")
load("data/grid.RData")
nrow(grid)
setwd("~/Documents/LassoVariants/grpRR_model/grpRR_analyses/run_time")
load("data/grid.RData")
nrow(grid)
p <- 5000
n<-2000
g<-10
true.gamma <- rep(1,g)
pg <- rep(round(param$p/g),g)
pg <- rep(round(p/g),g)
true.pi <- rep(param$pi, g)
param$pi <- 0.2
true.pi <- rep(param$pi, g)
nm <- paste0("n",n,"_p", sum(pg),
"_g",param$g)
param <- grid[1,]
pg <- rep(round(param$p/g),g)
true.pi <- rep(param$pi, g)
nm <- paste0("n",n,"_p", sum(pg),
"_g",param$g)
print(nm)
it <- 2
set.seed(2468 + it*777)
dat <- makeExampleDataWithUnequalGroups(n=n+1000, pg=pg,
gammas = true.gamma,
pis = true.pi,
rho = param$rho,
tau=param$tau)
Xtrain <- dat$X
ytrain <- dat$y
# fit on the full dat sets to evaluate estimation of parameters
fits <- runMethods(Xtrain, ytrain, dat$annot,
include_nonfacQ=TRUE, compareIPF=TRUE,
n_rep=1 , th=0.01, beta0 = dat$beta,
standardize=FALSE, compareGRridge=TRUE,
include_varbvs=TRUE, includeRF = FALSE,
compareGroupLasso = FALSE, compareAdaLasso = FALSE)
library(grpRR)
# fit on the full dat sets to evaluate estimation of parameters
fits <- runMethods(Xtrain, ytrain, dat$annot,
include_nonfacQ=TRUE, compareIPF=TRUE,
n_rep=1 , th=0.01, beta0 = dat$beta,
standardize=FALSE, compareGRridge=TRUE,
include_varbvs=TRUE, includeRF = FALSE,
compareGroupLasso = FALSE, compareAdaLasso = FALSE)
Xtrain <- dat$X
ytrain <- dat$y
dat <- makeExampleDataWithUnequalGroups(n=n, pg=pg,
gammas = true.gamma,
pis = true.pi,
rho = param$rho,
tau=param$tau)
Xtrain <- dat$X
ytrain <- dat$y
# fit on the full dat sets to evaluate estimation of parameters
fits <- runMethods(Xtrain, ytrain, dat$annot,
include_nonfacQ=TRUE, compareIPF=TRUE,
n_rep=1 , th=0.01, beta0 = dat$beta,
standardize=FALSE, compareGRridge=TRUE,
include_varbvs=TRUE, includeRF = FALSE,
compareGroupLasso = FALSE, compareAdaLasso = FALSE)
nrow(grid)
param <- grid[40,]
setwd("/Volumes/huber/users/bvelten/tmp/grpRR/grpRR_analyses/run_time")
load("data/grid.RData")
nrow(grid)
param <- grid[40,]
g <- param$g
true.gamma <- rep(1,g)
n <- param$n
pg <- rep(round(param$p/g),g)
true.pi <- rep(param$pi, g)
nm <- paste0("n",n,"_p", sum(pg),
"_g",param$g)
print(nm)
it <- 1
set.seed(2468 + it*777)
dat <- makeExampleDataWithUnequalGroups(n=n, pg=pg,
gammas = true.gamma,
pis = true.pi,
rho = param$rho,
tau=param$tau)
library(grpRR)
dat <- makeExampleDataWithUnequalGroups(n=n, pg=pg,
gammas = true.gamma,
pis = true.pi,
rho = param$rho,
tau=param$tau)
Xtrain <- dat$X
ytrain <- dat$y
# fit on the full dat sets to evaluate estimation of parameters
fits <- runMethods(Xtrain, ytrain, dat$annot,
include_nonfacQ=TRUE, compareIPF=TRUE,
n_rep=1 , th=0.01, beta0 = dat$beta,
standardize=FALSE, compareGRridge=TRUE,
include_varbvs=TRUE, includeRF = FALSE,
compareGroupLasso = FALSE, compareAdaLasso = FALSE)
setwd("/Volumes/huber/users/bvelten/tmp/grpRR/grpRR_analyses/run_time")
load("data/grid.RData")
grif$p
grid$p
rep(round(param$p/g),g)
rep(round(grid$p/g),g)
g<-2
rep(round(grid$p/g),g)
g<-4
rep(round(grid$p/g),g)
param<-grid
rep(round(param$p/g),g)
sum(rep(round(param$p[1/g),g))
sum(rep(round(param$p[1]/g),g))
sum(rep(round(param$p[2]/g),g))
sum(rep(round(param$p[22]/g),g))
sum(rep(round(param$p[12]/g),g))
apply(grid,2,function(param)sum(rep(round(param$p[12]/g),g)))
apply(grid,2,function(param) sum(rep(round(param$p[12]/g),g)))
apply(grid,2,function(param) sum(rep(round(param["p"]/g),g)))
apply(grid,2,function(param) sum(rep(round(param[4]/g),g)))
apply(grid,2,function(param) sum(rep(round(param[2]/g),g)))
setwd("~/Documents/LassoVariants/grpRR_model/grpRR/vignettes")
devtools::load_all(".")
library(magrittr)
library(ggplot2)
set.seed(1234)
data <- makeExampleData(n = 400, p=800, g=4,
pis=c(0.05,0.1,0.05,0.1), gammas=c(0.1,0.1,10,10))
data <- makeExampleData(n = 40, p=80, g=2,
pis=c(0.05,0.1,0.05,0.1), gammas=c(0.1,0.1,10,10))
data <- makeExampleData(n = 40, p=80, g=2,
pis=c(0.05,0.1), gammas=c(0.1,10))
fit <- fit_grpRR(data$X, data$y, data$annot,
n_rep=3, verbose = FALSE, th = 0.001)
plotELBO(fit)
plotPosterior(fit, "gamma", gamma0 = data$gammas, range=c(0,20))
plotPosterior(fit, "pi", pi0 = data$pis)
# get intercept
intercept <- fit$intercept
intercept
# get coefficients
beta <- fit$EW_beta
# plot estimated versus true beta
qplot(beta, data$beta) + coord_fixed()
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=T, compareGroupLasso=T,
compareSparseGroupLasso=T, includeRF=T,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
?vapply
devtools::load_all(".")
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=T, compareGroupLasso=T,
compareSparseGroupLasso=T, includeRF=T,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
warnings()
comp[[1]]$beta_mat
comp[[1]]$pf_mat
fits <- runMethods(data$X,data$y, data$annot)
getl1error_intercept(fits)
getl1error_beta(fits)
eval <0 evaluateFits(fits)
eval <- evaluateFits(fits)
getRunTime(fits)
getIntercept(fits)
getCoefficients(fits)
getSparsityLevel(fits)
getPenaltyFactors(fits)
devtools::document(".")
devtools::document(".")
devtools::load_all(".")
devtools::load_all(".")
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
debugonce(runMethods)
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
traceback()
devtools::load_all(".")
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=T, compareGroupLasso=T,
compareSparseGroupLasso=T, includeRF=T,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
traceback()
getPenaltyFactors(comp)
numeric(3)
debugonce(getPenaltyFactors)
numeric(3)
getPenaltyFactors(comp)
G
AllFits$G
AllFits
AllFits[[1]]
getPenaltyFactors(comp[[1]])
debugonce(getPenaltyFactors)
getPenaltyFactors(comp[[1]])
G
fits
debugonce(getPenaltyFactors)
getPenaltyFactors(fits)
G
sapply(AllFits$summaryList, function(l) {
pfs <- l$pf
if (!is.null(pfs))
pfs else rep(NA, G)
})
vapply(AllFits$summaryList, function(l) {
pfs <- l$pf
if (!is.null(pfs))
pfs else rep(NA, G)
}, numeric(G))
AllFits$summaryList[[1]]$pf
class(AllFits$summaryList[[1]]$pf)
class(AllFits$summaryList[["randomForest"]]$pf)
class(rep(NA,2))
class(rep(0,2))
getSparsityLevel(fits)
debugonce(getSparsityLevel)
getSparsityLevel(fits)
sparsity_mat
sapply(fits, function(l) class(l$pf))
sapply(fits, function(l) class(l$pfs))
sapply(fits, function(l) class(l$sparsity))
sapply(fits, function(l) class(l$summary$sparsity))
sapply(fits, function(l) class(l$summaryList$sparsity))
sapply(fits$summaryList, function(l) class(l$sparsity))
sapply(fits, function(l) class(l$summaryList$pf))
sapply(fits$summaryList, function(l) class(l$pf))
fits$summaryList$IPFLasso$pf
devtools::load_all(".")
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
devtools::load_all(".")
?evaluateFits
evaluateFits(fits, data$X, data$y)
efits <- evaluateFits(fits, data$X, data$y)
efits$summaryList$GroupLasso$RMSE
runMethods
?runMethods
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE,
nfolds = 3, plot_cv = FALSE, verbose=FALSE, beta0 = data$beta, trueintercept=0)
comp[[1]]$FNR
devtools::load_all(".")
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE,
nfolds = 3, plot_cv = FALSE, verbose=FALSE, beta0 = data$beta, trueintercept=0)
comp[[1]]$l1error_intercept
comp[[1]]$l1error_beta
comp[[1]]$intercepts
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE,
nfolds = 3, plot_cv = FALSE, verbose=FALSE, beta0 = data$beta, trueintercept=1)
comp[[1]]$l1error_intercept
comp[[1]]$intercept
devtools::document(".")
devtools::document(".")
seq_along(3)
seq_along(1:3)
seq_along(1:0)
foldid
