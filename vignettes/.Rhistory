devtools::load_all(".")
library(pace)
library(randomForest)
intercept<-0
ntotal<-500
which4train<-1:40
which4test<-41:ntotal
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd
p<-80
data<-simulate_grpLM(n=ntotal,p=p, beta_best=3, G=10, block_cor=0, blockSize=10, equiCor=0,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=1/tau, family="binomial")
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1000,  intercept = F, trueintercept = intercept, beta0=data$beta0, plotit = F, standardize = T, include_nonfacQ = T, family = "binomial", compareGRridge = T)
#running times
AllFits$result$runningTime
AllFits$resultFF$runningTime
evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], family = "binomial")
setwd("~/svn/huber/users/bvelten/LassoVariants/grpRR/vignettes")
devtools::load_all(".")
library(pace)
library(randomForest)
intercept<-0
ntotal<-500
which4train<-1:40
which4test<-41:ntotal
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd
p<-80
data<-simulate_grpLM(n=ntotal,p=p, beta_best=3, G=10, block_cor=0, blockSize=10, equiCor=0,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=1/tau, family="binomial")
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1000,  intercept = F, trueintercept = intercept, beta0=data$beta0, plotit = F, standardize = T, include_nonfacQ = T, family = "binomial", compareGRridge = T)
#running times
AllFits$result$runningTime
AllFits$resultFF$runningTime
evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], family = "binomial")
#library(grpRR)
library(GRridge)
library(ipflasso)
library(glmnet)
devtools::load_all("~/svn/huber/users/bvelten/LassoVariants/grpRR/")
library(ggplot2)
library(gridExtra)
knitr::opts_chunk$set(fig.width = 15)
RunMethods
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1000,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F, )
EvalDF<-data.frame()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:100){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=540,p=80, beta_best=3, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:40
which4test<-41:540
#test if an intercept is estimated correctly
intercept<--20
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1000,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F, )
EvalOut<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
EvalDFcurrent<-cbind(EvalOut,  run =simNo, seed=rnd)
EvalDF<-rbind(EvalDF,EvalDFcurrent)
EvalDF
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(EvalDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggDiff<-ggplot(EvalDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(EvalDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
EvalDF
EvalDFcurrent
EvalDF<-data.frame()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:100){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=540,p=80, beta_best=3, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:40
which4test<-41:540
#test if an intercept is estimated correctly
intercept<--20
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1000,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F)
EvalOut<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
EvalDFcurrent<-cbind(EvalOut,  run =simNo, seed=rnd)
EvalDF<-rbind(EvalDF,EvalDFcurrent$EvalDF)
EvalDF
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(EvalDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggDiff<-ggplot(EvalDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(EvalDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
EvalDF
EvalDFcurrent$EvalDF
EvalDF<-data.frame()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:100){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=540,p=80, beta_best=3, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:40
which4test<-41:540
#test if an intercept is estimated correctly
intercept<--20
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1000,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F)
EvalOut<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)$EvalDF
EvalDFcurrent<-cbind(EvalOut,  run =simNo, seed=rnd)
EvalDF<-rbind(EvalDF,EvalDFcurrent)
EvalDF
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(EvalDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggDiff<-ggplot(EvalDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(EvalDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
unique(EvalDF$method)
filter(EvalDF, method %in% c("beta_EN", "beta_lasso", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel")
EvalDF_sub<-filter(EvalDF, method %in% c("beta_EN", "beta_lasso", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
EvalDF_sub<-filter(EvalDF, method %in% c("beta_EN", "beta_lasso", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
library(dplyr)
EvalDF_sub<-filter(EvalDF, method %in% c("beta_EN", "beta_lasso", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
PredPerfromDF<-data.frame()
PFDF<-data.frame()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:100){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=540,p=80, beta_best=3, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:40
which4test<-41:540
#test if an intercept is estimated correctly
intercept<--20
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1000,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F)
EvalOut_current<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)$EvalDF
PredPerfromDFcurrent<-cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(EvalDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(EvalDF, method %in% c("beta_EN", "beta_lasso", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggDiff<-ggplot(EvalDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(EvalDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
PFDF
EvalOut_current$DFGroupPenalties
EvalOut_current
evalResult
EvalOut_current
EvalOut_current<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)$EvalDF
EvalOut_current
PredPerfromDF<-data.frame()
PFDF<-data.frame()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:3){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=540,p=80, beta_best=3, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:40
which4test<-41:540
#test if an intercept is estimated correctly
intercept<--20
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1000,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F)
EvalOut_current<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
PredPerfromDFcurrent<-cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(EvalDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(EvalDF, method %in% c("beta_EN", "beta_lasso", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
PFDF_sub<-filter(PFDF, )
ggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors -", drugnm))+
facet_wrap(~variable, s = "free_y")
print(ggPF)
ggDiff<-ggplot(EvalDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(EvalDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
PFDF
unique(PFDF$variable)
PFDF_sub<-filter(PFDF, variable %in% c("gamma_dense_ff", "gamma_dense", "sparsity_true"))
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors -", drugnm))+
facet_wrap(~variable, s = "free_y")
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, s = "free_y")
print(ggPF)
PFDF_sub
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, s = "free_y")
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
setwd("~/Documents/LassoVariants/grpRR_model/grpRR/vignettes")
devtools::load_all(.)
devtools::load_all(".")
library(magrittr)
library(ggplot2)
set.seed(1234)
data <- makeExampleData(n = 400, p=800, g=4,
pis=c(0.05,0.1,0.05,0.1), gammas=c(0.1,0.1,10,10))
fit <- fit_grpRR(data$X, data$y, data$annot,
n_rep=3, verbose = FALSE, th = 0.001)
plotELBO(fit)
plotPosterior(fit, "gamma", gamma0 = data$gammas, range=c(0,20))
plotPosterior(fit, "pi", pi0 = data$pis)
plotPosterior(fit, "s", pi0 = data$pis)
devtools::load_all(".")
plotPosterior(fit, "s", pi0 = data$pis)
devtools::load_all(".")
plotPosterior(fit, "gamma", gamma0 = data$gammas, range=c(0,20))
plotPosterior(fit, "pi", pi0 = data$pis)
plotPosterior(fit, "tau", pi0 = data$pis)
devtools::load_all(".")
plotPosterior(fit, "tau", pi0 = data$pis)
plotPosterior(fit, "tau", tau0 = 2)
plotPosterior(fit, "beta")
plotPosterior(fit, "s")
?coef
?glmnet::coef
??glmnet::coef
grpreg::coef
library(grpreg)
coef.grpreg
grpreg:::coef
grpreg:::predict
coef.grpreg
grpreg::predict
grpreg::.predict
grpreg:::.predict
data(Birthwt)
X <- Birthwt$X
y <- Birthwt$low
group <- Birthwt$group
fit <- grpreg(X, y, group, penalty="grLasso", family="binomial")
coef(fit, lambda=.001)
debugonce(coef)
coef(fit, lambda=.001)
UseMethod("coef")
?coef
??coef
stats::coef(fit, lambda=.001)
coef.grpreg
grpreg:::coef.grpreg
grpreg:::coef
??cvSGL
?`:::`
?:::
?':::'
grpreg::coef.grpreg
devtools::document()
devtools::load_all(".")
data <- makeExampleData(n = 400, p=800, g=4,
pis=c(0.05,0.1,0.05,0.1), gammas=c(0.1,0.1,10,10))
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=T, compareGroupLasso=T,
compareSparseGroupLasso=T, includeRF=T,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
devtools::load_all(".")
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=T, compareGroupLasso=T,
compareSparseGroupLasso=T, includeRF=T,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
devtools::load_all(".")
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=T, compareGroupLasso=T,
compareSparseGroupLasso=T, includeRF=T,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
`%:::%` = function(pkg, fun) get(fun, envir = asNamespace(pkg),
inherits = FALSE)
'stats' %:::% 'Pillai'
devtools::load_all(".")
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=T, compareGroupLasso=T,
compareSparseGroupLasso=T, includeRF=T,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
grpreg:::coef_grpreg
grpreg:::coef
grpreg:::coef.grpreg
coef.grpreg
?coef.grpreg
grpreg::coef
??coef
grpreg:::coef
