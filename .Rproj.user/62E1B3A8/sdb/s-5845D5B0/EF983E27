{
    "collab_server" : "",
    "contents" : "//C Functions calling the main function from classes\n\n#include <RcppArmadillo.h>\n#include \"grpRRclass.hpp\"\n#include \"grpRRclass_fullyfac.hpp\"\n#include \"grpRR_sparseclass_fullyfac.hpp\"\n#include \"grpRRclass_logistic.hpp\"\n#include \"grpRRclass_logistic_fullyfac.hpp\"\n\n\n// [[Rcpp::depends(RcppArmadillo)]]\n\n//Fitting a normal prior model with only partially factorized variational distribution\n// [[Rcpp::export]]\nRcpp::List grRRCpp_dense_nf(arma::mat X, arma::vec y, arma::Row<int> annot, int g, arma::vec NoPerGroup, double d_tau =0.001, double r_tau =0.001,\n   double d_gamma =0.001, double r_gamma =0.001, int max_iter=1000, double th=1e-7, bool calcELB=true, bool verbose=true, int freqELB=10){\n\n    grpRR MyModel(X,y,annot,g,NoPerGroup, d_tau, r_tau, d_gamma, r_gamma, max_iter, th, calcELB, verbose, freqELB);\n    List result =MyModel.fitModel();\n\n    return(result); // transforms an arbitrary object into a SEXP.\n}\n\n\n//Fitting a normal prior model with fully factorized variational distribution\n// [[Rcpp::export]]\nRcpp::List grRRCpp_dense_ff(arma::mat X, arma::vec y, arma::Row<int> annot, int g, arma::vec NoPerGroup, double d_tau =0.001, double r_tau =0.001,\n                            double d_gamma =0.001, double r_gamma =0.001, int max_iter=1000, double th=1e-7, bool calcELB=true, bool verbose=true, int freqELB=10){\n\n  grpRR_dense_ff MyModel(X,y,annot,g,NoPerGroup, d_tau, r_tau, d_gamma, r_gamma, max_iter, th, calcELB, verbose, freqELB);\n  List result =MyModel.fitModel();\n\n  return(result);\n}\n\n\n//Fitting a spike and slab prior model with fully factorized variational distribution\n// [[Rcpp::export]]\nRcpp::List grRRCpp_sparse_ff(arma::mat X, arma::vec y, arma::Row<int> annot, int g, arma::vec NoPerGroup, double d_tau =0.001, double r_tau =0.001,\n                          double d_gamma =0.001, double r_gamma =0.001, double r_pi=1, double d_pi=1, int max_iter=1000, double th=1e-7, bool calcELB=true, bool verbose=true, int freqELB=10){\n\n  grpRR_sparse_ff MyModel(X,y,annot,g,NoPerGroup, d_tau, r_tau, d_gamma, r_gamma, r_pi, d_pi, max_iter, th, calcELB, verbose, freqELB);\n  List result =MyModel.fitModel();\n\n  return(result);\n}\n\n//Fitting a normal prior logistic model with only partially factorized variational distribution\n// [[Rcpp::export]]\nRcpp::List grpRRCpp_logistic_nf(arma::mat X, arma::vec y, arma::Row<int> annot, int g, arma::vec NoPerGroup,\n                            double d_gamma =0.001, double r_gamma =0.001, int max_iter=1000, double th=1e-7,\n                            bool calcELB=true, bool verbose=true, int freqELB=10){\n\n  grpRR_logistic_nf MyModel(X,y,annot,g,NoPerGroup, d_gamma, r_gamma, max_iter, th, calcELB, verbose, freqELB);\n  List result =MyModel.fitModel();\n\n  return(result);\n}\n\n\n//Fitting a normal prior logistic model with fully factorized variational distribution\n// [[Rcpp::export]]\nRcpp::List grpRRCpp_logistic_ff(arma::mat X, arma::vec y, arma::Row<int> annot, int g, arma::vec NoPerGroup,\n                            double d_gamma =0.001, double r_gamma =0.001, int max_iter=1000, double th=1e-7,\n                            bool calcELB=true, bool verbose=true, int freqELB=10){\n\n  grpRR_logistic_ff MyModel(X,y,annot,g,NoPerGroup, d_gamma, r_gamma, max_iter, th, calcELB, verbose, freqELB);\n  List result =MyModel.fitModel();\n\n  return(result);\n}\n\n",
    "created" : 1499160967467.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1669009129",
    "id" : "EF983E27",
    "lastKnownWriteTime" : 1488796101,
    "last_content_update" : 1488796101,
    "path" : "~/Documents/LassoVariants/multiviewHDR/grpRR/src/fit_grpRR.cpp",
    "project_path" : "src/fit_grpRR.cpp",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}