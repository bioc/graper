{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Example_MOFAdata\"\nauthor: \"Britta Velten\"\ndate: \"5/17/2017\"\noutput:\n  BiocStyle::html_document:\n    toc: true\n---\n\n\n```{r, message=F, warning=F}\n#library(grpRR)\nlibrary(GRridge)\nlibrary(ipflasso)\nlibrary(glmnet)\ndevtools::load_all(\"~/svn/huber/users/bvelten/LassoVariants/multiviewHDR/grpRR/\")\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(tidyr)\n# library(pace)\nlibrary(randomForest)\nknitr::opts_chunk$set(fig.width = 15)\nlibrary(dplyr)\n```\n\n# Introduction\nThis vignette illustrates the use of the grpRR model on CLL data using the same views as in MOFA.\n\n```{r}\ntoday <- \"170517\"\n```\n\n#load data\n```{r}\ndatadir <- \"~/Documents/MOFA/CLL_MOFA_data/views/commonPats/without_mut/\"\nallViewsFiles <- list.files(datadir)\nallViewsFiles <- allViewsFiles[!grepl(\"covariates\",allViewsFiles)]\nallViewsFiles <- allViewsFiles[!grepl(\"mut\", allViewsFiles)]\nallViews <- lapply(allViewsFiles, function(nm) read.table(file.path(datadir, nm)))\nnames(allViews) <- sub(\".txt\", \"\", allViewsFiles)\n\n#Get annotations from ENSEMBLE\nmRNA_file <- \"~/Documents/BioMart/Hsapiens_genes_BioMart.75.txt\"\nmRNA = read.csv(file=mRNA_file,header=T,sep=\"\\t\",stringsAsFactors=F)\ncolnames(allViews$mRNA) <- mRNA$symbol[match(colnames(allViews$mRNA), mRNA$ens_id)]\n```\n\n\n#Reduce dimensionality of features\n```{r}\nDimRed<-\"OptionA\"\n```\n\n##Option A: Filter to top n variable features\nAt the moment only using expression data, as methylation views have been mixed up and adding one noise view.\n```{r, eval=DimRed==\"OptionA\"}\n#for illustration prupose use only small number of feautres, later more\nntop <- 100\nnNoise <- 100\ntop_allViews<-lapply(allViews, function(dat){\n  var<-apply(dat,2, function(feat) var(feat, na.rm = T))\n  dat<-dat[,order(var, decreasing = T)[1:min(ntop, ncol(dat))]]\n  if(any(is.na(dat))) dat <- apply(dat,2, ImputeByMean)\n  dat\n})\nsapply(top_allViews, dim)\n\n\n#join and remove NAs\nXCLL<-do.call(cbind, top_allViews)\ndim(XCLL)\nannotCLL<-rep(names(top_allViews), times=sapply(top_allViews, ncol))\n\n# #other groups?\n# #additional groups by chromosome\n# annotChr<-sapply(1:ncol(XCLL), function(colNo) filter(annoslist[[annotBiotype[colNo]]], ens_id==colnames(XCLL)[colNo])$chr)\n# annotChr<-ifelse(annotChr %in% c(\"chr11\",\"chr12\",\"chr13\",\"chr17\"), \"in\", \"out\")\n# annotCLL<-paste(annotBiotype, annotChr, sep=\"_\")\n# annotrandom<-rbinom(ncol(XCLL), 1,0.3)\n# annotrandom<-paste(annotBiotype, annotrandom, sep=\"_\")\n# \n\n#include a noise group\nnoiseMat<-matrix(rnorm(ntop*nrow(XCLL)),nrow=nrow(XCLL), ncol=nNoise)\ncolnames(noiseMat)<-paste(\"noise\", 1:(nNoise), sep=\"_\")\nXCLL<-cbind(XCLL,noiseMat )\nannotCLL<-c(annotCLL, rep(\"noise\",nNoise))\ntable(annotCLL)\n```\n\n##Option B use top PCs of each omic\n```{r, eval=DimRed==\"OptionB\"}\n# noPCs<-30\n# PCsCLLOmics<-lapply(CLLOmics[1:3], function(dat){\n#     pc.out<-prcomp(dat)\n#     dat<-pc.out$x[,1:noPCs]\n# })\n# sapply(PCsCLLOmics, dim)\n# for(i in 1:length(PCsCLLOmics)) colnames(PCsCLLOmics[[i]])<-paste(colnames(PCsCLLOmics[[i]]), names(PCsCLLOmics)[i], sep=\"_\")\n# #join\n# XCLL<-do.call(cbind, PCsCLLOmics)\n# dim(XCLL)\n# annotCLL<-rep(names(PCsCLLOmics), times=sapply(PCsCLLOmics, ncol))\n# \n# #include a noise group\n# noiseMat<-matrix(rnorm(noPCs*nrow(XCLL)),nrow=nrow(XCLL), ncol=noPCs)\n# colnames(noiseMat)<-paste(\"noise\", 1:noPCs, sep=\"_\")\n# XCLL<-cbind(XCLL,noiseMat )\n# annotCLL<-c(annotCLL, rep(\"noise\", noPCs))\n\n```\n\n\n#Choose response\nUse mean methlyation as response\n```{r}\nmodel <- MOFAtools::loadModel(\"~/Documents/MOFA/CLL_MOFA_data/out/fullModel_170325.hdf5\")\nLFs <- model@Expectations$Z$E\nrownames(model@Expectations$SW$mRNA$ESW) <- mRNA$symbol[match(rownames(model@Expectations$SW$mRNA$ESW), mRNA$ens_id)]\n```\n\n\n#Optional: Scale Feautres\nTo make penalty factors and coeffcients more comparable\n```{r}\nXCLL<-scale(XCLL)\n```\n\n#Repeated Fitting and Evaluation\n```{r, fig.height=12, fig.width=15}\n\nfor (idx in c(3,5,6,8,9)) {\nPredPerfromDF<-data.frame()\nPFDF<-data.frame()\nbetaDF<-data.frame()\nELB<-list()\nELB_FF<-list()\nELB_SS<-list()\n\nncv<-1\nnfolds<-10\nnrep <- ncv*nfolds\nfoldid<-NULL\nfor(i in 1:ncv){\nset.seed(101+i)\nfoldidnew<-sample(rep(seq(nfolds), length=nrow(XCLL)))\nfoldid<-rbind(foldid,foldidnew)\n}\n\npdf(paste(\"cv_LF\",idx, \"_\", today,\".pdf\", sep=\"\"), width = 20, height = 15)\n# par(mfrow=c(3,3))\nfor(cvidx in 1:ncv){\nfor(foldidx in 1:nfolds){\n  rep <- nfolds*(cvidx-1) + foldidx\n  y <- LFs[,idx, drop=F]\n  \n  #split in train and test data\n  # set.seed(10213+rep)\n  use4test<-foldid[1,]==foldidx\n  trainsamples<-(1:nrow(XCLL))[!use4test]\n  ytrain<-y[ !use4test,,drop=F ]\n  ytest<-y[use4test,,drop=F]\n  Xtrain<-XCLL[ !use4test,]\n  Xtest<-XCLL[use4test,]\n  \n  \n  #remove features without variaton in training data\n  toKeep<-apply(Xtrain,2,var)>0 & ! duplicated(t(Xtrain)) #& apply(1:ncol(Xtrain), function(c) all(abs(cor(XCLL)[c,-c]<0.9)))\n  Xtrain<-Xtrain[,toKeep]\n  Xtest<-Xtest[,toKeep]\n  annottmp<-annotCLL[toKeep]\n\n  print(paste(\"For prediciton of LF\", idx, \"there are ntrain=\",dim(Xtrain)[1],\n              \"ntest=\",dim(Xtest)[1], \"samples and\",dim(Xtrain)[2], \"features for training\"))\n  table(annottmp)\n  \n  #fit models\n  AllFits_current<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),\n                             annot = annottmp, max_iter = 2000, beta0 = NULL,\n                             intercept = T, trueintercept = NULL,  compareGroupLasso = T,\n                             plotit = F, standardize=T, verbose=F, compareGRridge = T, \n                             freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)\n  \n  #Checking convergence of ELB\n  ELB[[rep]]<-AllFits_current$result$ELB_trace\n  ELB_FF[[rep]]<-AllFits_current$resultFF$ELB_trace\n  ELB_SS[[rep]]<-AllFits_current$resultSS$ELB_trace\n\n  #evaluate prediciton performance\n  EvalOut_current<-evalResult(AllFits_current, Xtest=as.matrix(Xtest), ytest=ytest, plotit = F, plotbeta = F)\n  \n  PredPerfromDFcurrent<-cbind(EvalOut_current$EvalDF,  run =rep)\n  PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)\n  \n  PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =rep)\n  PFDF<-rbind(PFDF, PFDFcurrent)\n  \n  betaDFcurrent<-cbind(EvalOut_current$betaDF,  run =rep)\n  betaDF<-rbind(betaDF, betaDFcurrent)\n}\n}\n\n# par(mfrow=c(3,3))\n# for(rep in 1:nrep) {\n#     plot(ELB[[rep]])\n#     plot(ELB_SS[[rep]])\n#     plot(ELB_FF[[rep]])\n# }\n\n#save results\nresultList <- list(PredPerfromDF=PredPerfromDF,PFDF=PFDF, betaDF=betaDF)\nsave(resultList, file = paste(\"Results_ggreg_Lf\", idx, \"_\", today,\".RData\", sep=\"\"))\npar(mfrow=c(1,1))\n#produce plots\nggMSE<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+\n      theme(axis.text.x = element_text(angle = 60, hjust = 1))+ggtitle(paste(\"MSE - LF\", idx))\nprint(ggMSE)\n\nggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+\n      theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste(\"Penalty factors -  LF\", idx))+\n      facet_wrap(~variable, scales = \"free_y\")\nprint(ggPF)\n\nggbeta<-ggplot(betaDF, aes(x=FeatureNo, fill=group, y=value, group=FeatureNo))+\n          geom_bar(position = \"dodge\", stat = \"summary\", fun.y = \"mean\")+\n          theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste(\"Mean estimated coefficients -  LF\", idx)) +\n          facet_wrap(~variable, scales = \"free_y\")\nprint(ggbeta)\n\nbetDFon<-betaDF\nbetDFon$value<-ifelse(betaDF$value==0,0,1)\nselectedDF<-dplyr::filter(betDFon, variable %in% c(\"beta_lasso\", \"beta_estSScutoff\"))\nSelectedAtLeastOnce<-selectedDF$Feature[selectedDF$value>0]\nselectedDF<-filter(selectedDF, Feature %in%SelectedAtLeastOnce )\nggSelected<-ggplot(selectedDF, aes(x=Feature, fill=group, y=value, group=FeatureNo))+\n          geom_bar(position = \"dodge\", stat = \"summary\", fun.y = \"mean\")+\n          theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste(\"On/Off of selected coefficients for sparse methods-  LF\", idx)) +\n          facet_wrap(~variable, nrow=2)\nprint(ggSelected)\ndev.off()\n}\n```\n\n#Explanation of Methods\n\n|name|description|\n|---|------------------------------------------------------------------------------|\n|beta_est| Hierarchical Bayes model with normal prior and group-wise precision|\n|beta_estFF| Hierarchical Bayes model with normal prior and group-wise precision, fitted using fully-factorised variational distribution (worse approximation of true posterior than in beta_est, but faster)|\n|beta_estSS| Hierarchical Bayes model with spike and slab prior and group-wise precision as well as spike-pobability, fitted using fully-factorised variational distribution |\n|beta_estSScutoff| same as beta_estSS but with coefficients set to exactly zero if expected probability for a feature to be zero is over 50%|\n|beta_gr| GRrdige (Mark van der Wiel) Empirical Bayes Group-wise Ridge Regression|\n|beta_grplasso| group lasso (using grpreg)|\n|beta_lasso| Lasso (using glmnet)|\n|beta_ridge| Ridge (using glmnet)|\n|beta_zeromodel| intercept only model|\n\n\n#Observations\n\n- Convergence using Spike and Slab not robust\n- Prediction Performance good, but weights meaningless -- look at variance explained per view\n",
    "created" : 1495045100794.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4173733274",
    "id" : "6DB89A78",
    "lastKnownWriteTime" : 1495039071,
    "last_content_update" : 1495039071,
    "path" : "~/Documents/LassoVariants/multiviewHDR/analysis/Example_CLLMOFAdata_predLFs.Rmd",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}