rnd #seed for simulation of data
# data<-simulate_grpLM(n=540,p=80, beta_best=3, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
# SLinG=0.8, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
G <- 5
pG <- 30
p <- G*pG
annot <- rep(1:G, each=pG)
n <- 540
gamma<-c(0.05,10000,0.2,3000,0.1) #10,2.1,0.12,6.5, 10000)
tau<-10
beta<-sapply(gamma[annot], function(prec) rnorm(1,0, 1/prec))
X<-matrix(rnorm(pG*G*n), ncol=pG*G, nrow=n)
y<-X%*%beta+rnorm(n,0,1/tau)
data$X <- X
data$y <- y
data$annot <- annot
data$beta0 <- beta
which4train<-1:40
which4test<-41:540
intercept <- 0
#test if an intercept is estimated correctly
intercept<--20
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 3000,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T)
EvalOut<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
PredPerfromDFcurrent<-cbind(EvalOut$EvalDF,  run =simNo)
PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)
PFDFcurrent<-cbind(EvalOut$DFGroupPenalties,  run =simNo)
PFDF<-rbind(PFDF, PFDFcurrent)
betaDFcurrent<-cbind(EvalOut$betaDF,  run =simNo)
betaDF<-rbind(betaDF, betaDFcurrent)
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
#
# ggMSE<-ggplot(EvalDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
#       theme(axis.text.x = element_text(angle = 60, hjust = 1))
# ggDiff<-ggplot(EvalDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
#       theme(axis.text.x = element_text(angle = 60, hjust = 1))
# ggIntercept<-ggplot(EvalDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
#       theme(axis.text.x = element_text(angle = 60, hjust = 1))
#
# gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
ggMSE<-ggplot(filter(PredPerfromDF, method %in% c("beta_est", "beta_ridge", "beta_lasso", "beta_estFF", "beta_zeromodel")), aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))+ggtitle(paste("MSE"))
print(ggMSE)
ggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors"))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
ggbeta<-ggplot(betaDF, aes(x=FeatureNo, fill=group, y=value, group=FeatureNo))+
geom_bar(position = "dodge", stat = "summary", fun.y = "mean")+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Mean estimated coefficients")) +
facet_wrap(~variable, scales = "free_y")
print(ggbeta)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
ggPF
patmeta
library(dplyr)
library(DESeq2)
library(data.table)
RNAseqFile<-"~/Documents/MOFA/CLL_MOFA_data/pace/data/dds.RData"
methFile<-"~/Documents/MOFA/CLL_MOFA_data/pace/data/meth.RData"
DrugResponseFile<-"~/Documents/MOFA/CLL_MOFA_data/pace/data/lpdAll.RData"
PatMetaFile<-"~/Documents/MOFA/CLL_MOFA_data/pace/data/patmeta.RData"
MutationsFile<-"~/Documents/MOFA/CLL_MOFA_data/pace/data/mutCOM.RData"
outDir<-"~/Documents/MOFA/CLL_MOFA_data/views/all_small_noXY_alldrugs_MCLL"
outDirOverlap<-"~/Documents/MOFA/CLL_MOFA_data/views/commonPats_small_noXY_alldrugs_MCLL"
if(!dir.exists(outDir))  dir.create(outDir)
if(!dir.exists(outDirOverlap))  dir.create(outDirOverlap)
namePatMeta<-load(PatMetaFile)
patmeta<-get(namePatMeta)
patmeta
patCLL<-patmeta %>% filter(IGHV=="M")
patCLL
test <- read.table("~/Documents/MOFA/CLL_MOFA_data/views/all_small_noXY_alldrugs_MCLL/viab.txt")
dim(test)
test <- read.table("~/Documents/MOFA/CLL_MOFA_data/views/commonPats_small_noXY_alldrugs_MCLL/viab.txt")
dim(test)
load("~/Documents/LassoVariants/multiviewHDR/grpRR/all_sim_p4000_4g_n100_170515.RData")
data$beta0
barplot(data$beta0)
out<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotbeta=T)
devtools::load_all("~/svn/huber/users/bvelten/LassoVariants/multiviewHDR/grpRR/")
out<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotbeta=T)
PredPerfromDF<-data.frame()
PFDF<-data.frame()
ELB<-list()
ELB_FF<-list()
ELB_SS<-list()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:10){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=600,p=500, beta_best=10, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:100
which4test<-101:600
#test if an intercept is estimated correctly
intercept<-0
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1500,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F, freqELB = 1000)
ELB[[simNo]]<-AllFits$result$ELB_trace
ELB_FF[[simNo]]<-AllFits$resultFF$ELB_trace
ELB_SS[[simNo]]<-AllFits$resultSS$ELB_trace
EvalOut_current<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
PredPerfromDFcurrent<-cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_estSS", "beta_estSScutoff", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
PFDF_sub<-filter(PFDF, variable %in% c("gamma_dense", "sparsity_true", "gamma_dense_ff"))
ggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PFDF_sub<-filter(PFDF, variable!="beta0")
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PFDF_sub<-filter(PFDF, variable %in% c("gamma_sparse", "sparsity_true", "pi_sparse"))
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
ggDiff<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
#library(grpRR)
library(GRridge)
library(ipflasso)
library(glmnet)
devtools::load_all("~/svn/huber/users/bvelten/LassoVariants/multiviewHDR/grpRR/")
library(ggplot2)
library(gridExtra)
library(dplyr)
library(randomForest)
knitr::opts_chunk$set(fig.width = 15)
PredPerfromDF<-data.frame()
PFDF<-data.frame()
ELB<-list()
ELB_FF<-list()
ELB_SS<-list()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:10){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=600,p=500, beta_best=10, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:100
which4test<-101:600
#test if an intercept is estimated correctly
intercept<-0
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1500,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F, freqELB = 1000)
ELB[[simNo]]<-AllFits$result$ELB_trace
ELB_FF[[simNo]]<-AllFits$resultFF$ELB_trace
ELB_SS[[simNo]]<-AllFits$resultSS$ELB_trace
EvalOut_current<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
PredPerfromDFcurrent<-cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_estSS", "beta_estSScutoff", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
PFDF_sub<-filter(PFDF, variable %in% c("gamma_dense", "sparsity_true", "gamma_dense_ff"))
ggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PFDF_sub<-filter(PFDF, variable!="beta0")
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PFDF_sub<-filter(PFDF, variable %in% c("gamma_sparse", "sparsity_true", "pi_sparse"))
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
ggDiff<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
PredPerfromDF<-data.frame()
PFDF<-data.frame()
ELB<-list()
ELB_FF<-list()
ELB_SS<-list()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:10){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=600,p=500, beta_best=10, G=8, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:100
which4test<-101:600
#test if an intercept is estimated correctly
intercept<-0
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1500,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F, freqELB = 1000)
ELB[[simNo]]<-AllFits$result$ELB_trace
ELB_FF[[simNo]]<-AllFits$resultFF$ELB_trace
ELB_SS[[simNo]]<-AllFits$resultSS$ELB_trace
EvalOut_current<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
PredPerfromDFcurrent<-cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
PredPerfromDF<-data.frame()
PFDF<-data.frame()
ELB<-list()
ELB_FF<-list()
ELB_SS<-list()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:10){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=600,p=500, beta_best=5, G=10, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:100
which4test<-101:600
#test if an intercept is estimated correctly
intercept<-0
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1500,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F, freqELB = 1000)
ELB[[simNo]]<-AllFits$result$ELB_trace
ELB_FF[[simNo]]<-AllFits$resultFF$ELB_trace
ELB_SS[[simNo]]<-AllFits$resultSS$ELB_trace
EvalOut_current<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
PredPerfromDFcurrent<-cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_estSS", "beta_estSScutoff", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
PFDF_sub<-filter(PFDF, variable %in% c("gamma_dense", "sparsity_true", "gamma_dense_ff"))
ggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PFDF_sub<-filter(PFDF, variable!="beta0")
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PFDF_sub<-filter(PFDF, variable %in% c("gamma_sparse", "sparsity_true", "pi_sparse"))
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
ggDiff<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
PFDF_sub<-filter(PFDF, variable %in% c("gamma_dense", "sparsity_true", "gamma_dense_ff"))
ggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PredPerfromDF<-data.frame()
PFDF<-data.frame()
ELB<-list()
ELB_FF<-list()
ELB_SS<-list()
gamma_dense<-gamma_sparse<-pi_sparse<-data.frame()
for(simNo in 1:10){
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd #seed for simulation of data
data<-simulate_grpLM(n=600,p=300, beta_best=5, G=6, block_cor=0.3, blockSize=10, equiCor=0.1,
SLinG=0, SLovG=0.5, model="linear", diffFac=0.7, seed=rnd, sigma2=0.1, family="gaussian", onlypos=F)
which4train<-1:100
which4test<-101:600
#test if an intercept is estimated correctly
intercept<-0
data$y<-data$y+intercept
AllFits<-RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = data$annot, max_iter = 1500,
intercept = T, trueintercept = intercept, beta0=data$beta0, plotit=F, standardize = T, includeRF = F, compareGRridge = F, freqELB = 1000)
ELB[[simNo]]<-AllFits$result$ELB_trace
ELB_FF[[simNo]]<-AllFits$resultFF$ELB_trace
ELB_SS[[simNo]]<-AllFits$resultSS$ELB_trace
EvalOut_current<-evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = F)
PredPerfromDFcurrent<-cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
PredPerfromDF<-rbind(PredPerfromDF, PredPerfromDFcurrent)
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
}
pi_sparse<-colMeans(pi_sparse)
gamma_sparse<-colMeans(gamma_sparse)
gamma_dense<-colMeans(gamma_dense)
ggMSE<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_estSS", "beta_estSScutoff", "beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_ridge", "beta_est", "beta_estFF",
"beta_grplasso", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
PFDF_sub<-filter(PFDF, variable %in% c("gamma_dense", "sparsity_true", "gamma_dense_ff"))
ggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PFDF_sub<-filter(PFDF, variable!="beta0")
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
PFDF_sub<-filter(PFDF, variable %in% c("gamma_sparse", "sparsity_true", "pi_sparse"))
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
ggDiff<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=L1DiffBeta))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggIntercept<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=InterceptDiff))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
gridExtra::grid.arrange(ggDiff,ggMSE,ggIntercept, ncol=2, nrow=2)
# # average penalty and sparsity factors
# par(mfrow=c(2,2))
# barplot(gamma_dense, main="gamma in dense model (precision)", names.arg = "")
# barplot(gamma_sparse, main="gamma in SSmodel (precision) ", names.arg = "")
# barplot(pi_sparse, main="pi in SSmodel (probability of being 'on'", names.arg = "")
PFDF_sub<-filter(PFDF, variable %in% c("gamma_dense", "sparsity_true", "gamma_dense_ff"))
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
ggPF<-ggplot(filter(PFDF_sub, gruop<4), aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF<-ggplot(filter(PFDF_sub, group<4), aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF<-ggplot(filter(PFDF_sub, as.numeric(group)<4), aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF
ggPF
PFDF_sub
filter(PFDF_sub, group != "intercept")
PFDF_sub<-filter(PFDF_sub, group != "intercept")
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF
ggPF<-ggplot(filter(PFDF_sub, group<4), aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF<-ggplot(filter(PFDF_sub, as.numeric(group)<4), aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF
ggPF<-ggplot(filter(PFDF_sub, as.numeric(group)<5), aes(x=group, fill=variable, y=value))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_EN", "beta_lasso","beta_ridge", "beta_est", "beta_estFF", "beta_true", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_lasso","beta_ridge", "beta_est", "beta_estFF", "beta_true", "beta_zeromodel"))
EvalDF_sub<-filter(PredPerfromDF, method %in% c("beta_lasso","beta_ridge", "beta_est", "beta_estFF", "beta_zeromodel"))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=10))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=20))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=20), axis.text.y =element_text(size=20))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +theme_set(theme_gray(base_size = 18))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +theme_set(theme_gray(base_size = 20))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme() +theme_set(theme_gray(base_size = 20),axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
theme() +theme_set(theme_gray(base_size = 20, axis.text.x = element_text(angle = 60, hjust = 1)))
?theme_set
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) )
?theme_gray
ggplot(EvalDF_sub, aes(x=method, fill=method, y=MSE))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) )
ggPF<-ggplot(PFDF_sub, aes(x=group, fill=variable, y=value))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) ) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
print(ggPF)
ggPF<-ggplot(filter(PFDF_sub, as.numeric(group)<5, aes(x=group, fill=variable, y=value))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) ) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF<-ggplot(filter(PFDF_sub, as.numeric(group)<5), aes(x=group, fill=variable, y=value))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) ) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF<-ggplot(filter(PFDF_sub, as.numeric(group)<5), aes(x=group, fill=variable, y=value))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) ) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF
ggPF<-ggplot(filter(PFDF_sub, as.numeric(group)<5 & ), aes(x=group, fill=variable, y=value))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) ) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
PFDF_sub
ggPF<-ggplot(filter(PFDF_sub, as.numeric(group)<5 & variable != "sparsity_true"), aes(x=group, fill=variable, y=value))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) ) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF
ggPF<-ggplot(filter(PFDF_sub,  variable != "sparsity_true"), aes(x=group, fill=variable, y=value))+geom_boxplot()+theme_set(theme_gray(base_size = 20)+ theme(axis.text.x = element_text(angle = 60, hjust = 1)) ) +ggtitle(paste("Penalty factors "))+
facet_wrap(~variable, scales = "free_y")
ggPF
Rcpp::compileAttributes()
devtools::document()
devtools::document()
library(devtools)
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
Rcpp::compileAttributes()
devtools::load_all("~/Documents/LassoVariants/multiviewHDR/grpRR/")
