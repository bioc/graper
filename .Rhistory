AllFits<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),
annot = annottmp, max_iter = 2000,
intercept = T, trueintercept = NULL, beta0=NULL, compareGroupLasso = T,
plotit = F, standardize=T, verbose=T, compareGRridge = T,
freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)
pf_mat <- getPenaltyFactors(AllFits)
pf_mat
sparsity_mat <- getSparsityLevel(AllFits)
beta_mat <- getCoefficients(AllFits)
intercepts <- getIntercept(AllFits)
AllFits <- evaluateFits(AllFits, Xtest=as.matrix(Xtest), ytest=ytest)
RMSE <- getRMSE(AllFits)
FNR <- getFNR(AllFits)
FPR <- getFPR(AllFits)
l1error_intercept <- getl1error_intercept(AllFits)
l1error_beta <- getl1error_beta(AllFits)
runtime <- getRunTime(AllFits)
list(FPR=FPR, FNR=FNR, RMSE=RMSE, pf_mat=pf_mat, beta_mat=beta_mat,
l1error_intercept=l1error_intercept, l1error_beta=l1error_beta,
intercepts=intercepts, sparsity_mat=sparsity_mat, annot=AllFits$annot, runtime=runtime)
repeats <- 5
ncv <- 1
nfolds <- 10
nrep <- ncv*nfolds
foldid <- NULL
for(i in 1:ncv){
set.seed(101+i)
foldidnew <- sample(rep(seq(nfolds), length=nrow(XCLL)))
foldid <- rbind(foldid,foldidnew)
}
for(cvidx in 1:ncv){
resultList <- lapply(1:nfolds, function(foldidx){
rep <- nfolds*(cvidx-1) + foldidx
y <- as.matrix(meanMeth)
#split in train and test data
set.seed(10213+rep)
testsamples<-sample(1:nrow(XCLL), round(0.1*nrow(XCLL)))
print(testsamples)
use4test <- foldid[cvidx,]==foldidx
trainsamples <- (1:nrow(XCLL))[!use4test]
ytrain <- y[ !use4test,,drop=F ]
ytest <- y[use4test,,drop=F]
Xtrain <- XCLL[ !use4test,]
Xtest <- XCLL[use4test,]
#remove features without variaton in training data
toKeep<-apply(Xtrain,2,var)>0 & ! duplicated(t(Xtrain)) #& apply(1:ncol(Xtrain), function(c) all(abs(cor(XCLL)[c,-c]<0.9)))
Xtrain<-Xtrain[,toKeep]
Xtest<-Xtest[,toKeep]
annottmp<-annotCLL[toKeep]
print(paste("For prediciton of mean methylation there are ntrain=",dim(Xtrain)[1],
"ntest=",dim(Xtest)[1], "samples and",dim(Xtrain)[2], "features for training"))
table(annottmp)
#fit models
AllFits<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),
annot = annottmp, max_iter = 2000,
intercept = T, trueintercept = NULL, beta0=NULL, compareGroupLasso = T,
plotit = F, standardize=T, verbose=T, compareGRridge = T,
freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)
pf_mat <- getPenaltyFactors(AllFits)
sparsity_mat <- getSparsityLevel(AllFits)
beta_mat <- getCoefficients(AllFits)
intercepts <- getIntercept(AllFits)
#evaluate prediciton performance
AllFits <- evaluateFits(AllFits, Xtest=as.matrix(Xtest), ytest=ytest)
RMSE <- getRMSE(AllFits)
FNR <- getFNR(AllFits)
FPR <- getFPR(AllFits)
l1error_intercept <- getl1error_intercept(AllFits)
l1error_beta <- getl1error_beta(AllFits)
runtime <- getRunTime(AllFits)
#return list with all results
list(FPR=FPR, FNR=FNR, RMSE=RMSE, pf_mat=pf_mat, beta_mat=beta_mat,
l1error_intercept=l1error_intercept, l1error_beta=l1error_beta,
intercepts=intercepts, sparsity_mat=sparsity_mat, annot=AllFits$annot, runtime=runtime)
})
}
plotMethodComparison(resultList)
df <- data.frame(beta_mat, S = AllFits$summaryList$grpRR_SS$out$EW_s, group = as.factor(annot), x = 1: p, true = beta_mat[,"TrueModel"] ==0)
ggplot(df, aes(x=x,y=grpRR_SS, fill=true)) +geom_bar(stat = "identity")
beta_mat
df <- data.frame(beta_mat, S = AllFits$summaryList$grpRR_SS$out$EW_s, group = as.factor(annot), x = 1: p, true = beta_mat[,"TrueModel"] ==0)
p
p <- ncol(XCLL)
n <- ncol(XCLL)
df <- data.frame(beta_mat, S = AllFits$summaryList$grpRR_SS$out$EW_s, group = as.factor(annot), x = 1: p, true = beta_mat[,"TrueModel"] ==0)
beta_mat
length(meanMeth)
beta0 <- rep(1/length(meanMeth), length(meanMeth))
#library(grpRR)
library(GRridge)
library(ipflasso)
library(glmnet)
devtools::load_all("~/Documents/LassoVariants/multiviewHDR/grpRR/")
library(ggplot2)
library(gridExtra)
library(tidyr)
# library(pace)
library(randomForest)
knitr::opts_chunk$set(fig.width = 15)
library(dplyr)
datadir <- "~/Documents/MOFA/CLL_MOFA_data/views/minView=all/"
allViewsFiles <- list.files(datadir)
allViewsFiles <- allViewsFiles[!grepl("covariates|mut|miRNA|lincRNA", allViewsFiles)]
allViews <- lapply(allViewsFiles, function(nm) read.table(file.path(datadir, nm)))
names(allViews) <- sub(".txt", "", allViewsFiles)
#for illustration prupose use only small number of feautres, later more
ntop <- 100
nNoise <- 100
top_allViews<-lapply(allViews, function(dat){
var<-apply(dat,2, function(feat) var(feat, na.rm = T))
dat<-dat[,order(var, decreasing = T)[1:min(ntop, ncol(dat))]]
if(any(is.na(dat))) dat <- apply(dat,2, ImputeByMean)
dat
})
sapply(top_allViews, dim)
#join and remove NAs
XCLL<-do.call(cbind, top_allViews)
dim(XCLL)
annotCLL<-rep(names(top_allViews), times=sapply(top_allViews, ncol))
# #other groups?
# #additional groups by chromosome
# annotChr<-sapply(1:ncol(XCLL), function(colNo) filter(annoslist[[annotBiotype[colNo]]], ens_id==colnames(XCLL)[colNo])$chr)
# annotChr<-ifelse(annotChr %in% c("chr11","chr12","chr13","chr17"), "in", "out")
# annotCLL<-paste(annotBiotype, annotChr, sep="_")
# annotrandom<-rbinom(ncol(XCLL), 1,0.3)
# annotrandom<-paste(annotBiotype, annotrandom, sep="_")
#
#include a noise group
noiseMat<-matrix(rnorm(ntop*nrow(XCLL)),nrow=nrow(XCLL), ncol=nNoise)
colnames(noiseMat)<-paste("noise", 1:(nNoise), sep="_")
XCLL<-cbind(XCLL,noiseMat )
annotCLL<-c(annotCLL, rep("noise",nNoise))
table(annotCLL)
meanMeth <- rowMeans(top_allViews$meth)
y <- as.matrix(meanMeth)
beta0 <- rep(1/length(meanMeth), length(meanMeth))
XCLL<-scale(XCLL)
p <- ncol(XCLL)
n <- ncol(XCLL)
# folds for splitting into test and train data
nfolds <- 10
foldid <- sample(rep(seq(nfolds), length=nrow(XCLL)))
resultList <- lapply(1:nfolds, function(foldidx){
#split in train and test data
set.seed(10213+foldidx)
testsamples<-sample(1:nrow(XCLL), round(0.1*nrow(XCLL)))
print(testsamples)
use4test <- foldid==foldidx
trainsamples <- (1:nrow(XCLL))[!use4test]
ytrain <- y[ !use4test,,drop=F ]
ytest <- y[use4test,,drop=F]
Xtrain <- XCLL[ !use4test,]
Xtest <- XCLL[use4test,]
#remove features without variaton in training data
toKeep<-apply(Xtrain,2,var)>0 & ! duplicated(t(Xtrain)) #& apply(1:ncol(Xtrain), function(c) all(abs(cor(XCLL)[c,-c]<0.9)))
Xtrain<-Xtrain[,toKeep]
Xtest<-Xtest[,toKeep]
annottmp<-annotCLL[toKeep]
print(paste("For prediciton of mean methylation there are ntrain=",dim(Xtrain)[1],
"ntest=",dim(Xtest)[1], "samples and",dim(Xtrain)[2], "features for training"))
table(annottmp)
#fit models
AllFits<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),
annot = annottmp, max_iter = 2000,
intercept = T, trueintercept = 0, beta0=beta0, compareGroupLasso = T,
plotit = F, standardize=T, verbose=F, compareGRridge = T,
freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)
pf_mat <- getPenaltyFactors(AllFits)
sparsity_mat <- getSparsityLevel(AllFits)
beta_mat <- getCoefficients(AllFits)
intercepts <- getIntercept(AllFits)
# Feature recvoery
df <- data.frame(beta_mat, S = AllFits$summaryList$grpRR_SS$out$EW_s, group = as.factor(annot), x = 1: p, true = beta_mat[,"TrueModel"] ==0)
ggplot(df, aes(x=x,y=grpRR_SS, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=grpRR_SScutoff, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=S, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=grpRR, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=TrueModel, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=Ridge, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=Lasso, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=ElasticNet, fill=true)) +geom_bar(stat = "identity")
#evaluate prediciton performance
AllFits <- evaluateFits(AllFits, Xtest=as.matrix(Xtest), ytest=ytest)
RMSE <- getRMSE(AllFits)
FNR <- getFNR(AllFits)
FPR <- getFPR(AllFits)
l1error_intercept <- getl1error_intercept(AllFits)
l1error_beta <- getl1error_beta(AllFits)
runtime <- getRunTime(AllFits)
#return list with all results
list(FPR=FPR, FNR=FNR, RMSE=RMSE, pf_mat=pf_mat, beta_mat=beta_mat,
l1error_intercept=l1error_intercept, l1error_beta=l1error_beta,
intercepts=intercepts, sparsity_mat=sparsity_mat, annot=AllFits$annot, runtime=runtime)
})
traceback()
AllFits
AllFits<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),
annot = annottmp, max_iter = 2000,
intercept = T, trueintercept = 0, beta0=beta0, compareGroupLasso = T,
plotit = F, standardize=T, verbose=F, compareGRridge = T,
freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)
#split in train and test data
set.seed(10213+foldidx)
testsamples<-sample(1:nrow(XCLL), round(0.1*nrow(XCLL)))
print(testsamples)
use4test <- foldid==foldidx
trainsamples <- (1:nrow(XCLL))[!use4test]
ytrain <- y[ !use4test,,drop=F ]
ytest <- y[use4test,,drop=F]
Xtrain <- XCLL[ !use4test,]
Xtest <- XCLL[use4test,]
#remove features without variaton in training data
toKeep<-apply(Xtrain,2,var)>0 & ! duplicated(t(Xtrain)) #& apply(1:ncol(Xtrain), function(c) all(abs(cor(XCLL)[c,-c]<0.9)))
Xtrain<-Xtrain[,toKeep]
Xtest<-Xtest[,toKeep]
annottmp<-annotCLL[toKeep]
print(paste("For prediciton of mean methylation there are ntrain=",dim(Xtrain)[1],
"ntest=",dim(Xtest)[1], "samples and",dim(Xtrain)[2], "features for training"))
table(annottmp)
#fit models
AllFits<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),
annot = annottmp, max_iter = 2000,
intercept = T, trueintercept = 0, beta0=beta0, compareGroupLasso = T,
plotit = F, standardize=T, verbose=F, compareGRridge = T,
freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)
foldidx <- 1
#split in train and test data
set.seed(10213+foldidx)
testsamples<-sample(1:nrow(XCLL), round(0.1*nrow(XCLL)))
print(testsamples)
use4test <- foldid==foldidx
trainsamples <- (1:nrow(XCLL))[!use4test]
ytrain <- y[ !use4test,,drop=F ]
ytest <- y[use4test,,drop=F]
Xtrain <- XCLL[ !use4test,]
Xtest <- XCLL[use4test,]
#remove features without variaton in training data
toKeep<-apply(Xtrain,2,var)>0 & ! duplicated(t(Xtrain)) #& apply(1:ncol(Xtrain), function(c) all(abs(cor(XCLL)[c,-c]<0.9)))
Xtrain<-Xtrain[,toKeep]
Xtest<-Xtest[,toKeep]
annottmp<-annotCLL[toKeep]
print(paste("For prediciton of mean methylation there are ntrain=",dim(Xtrain)[1],
"ntest=",dim(Xtest)[1], "samples and",dim(Xtrain)[2], "features for training"))
table(annottmp)
#fit models
AllFits<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),
annot = annottmp, max_iter = 2000,
intercept = T, trueintercept = 0, beta0=beta0, compareGroupLasso = T,
plotit = F, standardize=T, verbose=F, compareGRridge = T,
freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)
pf_mat <- getPenaltyFactors(AllFits)
sparsity_mat <- getSparsityLevel(AllFits)
beta_mat <- getCoefficients(AllFits)
intercepts <- getIntercept(AllFits)
AllFits
getCoefficients(AllFits)
debugonce(getCoefficients)
beta_mat <- getCoefficients(AllFits)
p
coefmat <- sapply(AllFits$summaryList, function(l) {
coef <- l$beta
if(!is.null(coef)) coef else rep(NA,p)
})
coefmat
dim(coefmat)
names(AllFits$summaryList)
names(AllFits$summaryList$grpRR$beta)
AllFits$summaryList$grpRR$beta
AllFits$summaryList$grpRR_FF$beta
l <- AllFits$summaryList[[1]]
coef <- l$beta
if(!is.null(coef)) coef else rep(NA,p)
coef
coefmat <- sapply(AllFits$summaryList, function(l) {
coef <- l$beta
if(!is.null(coef)) coef else rep(NA,p)
})
coefmat
sapply(coefmat, dim)
sapply(coefmat, length)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
unique(annot)
unique(annotCLL)
beta0 <- c(meth=1/length(meanMeth), mRNA=0, viab=0, noise=0)
beta0 <- beta0[annot]
length(beta0)
beta0 <- c(meth=1/length(meanMeth), mRNA=0, viab=0, noise=0)
beta0 <- beta0[annotCLL]
length(beta0)
annotCLL
# Chunk 1
#library(grpRR)
library(GRridge)
library(ipflasso)
library(glmnet)
devtools::load_all("~/Documents/LassoVariants/multiviewHDR/grpRR/")
library(ggplot2)
library(gridExtra)
library(tidyr)
# library(pace)
library(randomForest)
knitr::opts_chunk$set(fig.width = 15)
library(dplyr)
# Chunk 2
datadir <- "~/Documents/MOFA/CLL_MOFA_data/views/minView=all/"
allViewsFiles <- list.files(datadir)
allViewsFiles <- allViewsFiles[!grepl("covariates|mut|miRNA|lincRNA", allViewsFiles)]
allViews <- lapply(allViewsFiles, function(nm) read.table(file.path(datadir, nm)))
names(allViews) <- sub(".txt", "", allViewsFiles)
# Chunk 3
DimRed<-"OptionA"
# Chunk 4
#for illustration prupose use only small number of feautres, later more
ntop <- 100
nNoise <- 100
top_allViews<-lapply(allViews, function(dat){
var<-apply(dat,2, function(feat) var(feat, na.rm = T))
dat<-dat[,order(var, decreasing = T)[1:min(ntop, ncol(dat))]]
if(any(is.na(dat))) dat <- apply(dat,2, ImputeByMean)
dat
})
sapply(top_allViews, dim)
#join and remove NAs
XCLL<-do.call(cbind, top_allViews)
dim(XCLL)
annotCLL<-rep(names(top_allViews), times=sapply(top_allViews, ncol))
# #other groups?
# #additional groups by chromosome
# annotChr<-sapply(1:ncol(XCLL), function(colNo) filter(annoslist[[annotBiotype[colNo]]], ens_id==colnames(XCLL)[colNo])$chr)
# annotChr<-ifelse(annotChr %in% c("chr11","chr12","chr13","chr17"), "in", "out")
# annotCLL<-paste(annotBiotype, annotChr, sep="_")
# annotrandom<-rbinom(ncol(XCLL), 1,0.3)
# annotrandom<-paste(annotBiotype, annotrandom, sep="_")
#
#include a noise group
noiseMat<-matrix(rnorm(ntop*nrow(XCLL)),nrow=nrow(XCLL), ncol=nNoise)
colnames(noiseMat)<-paste("noise", 1:(nNoise), sep="_")
XCLL<-cbind(XCLL,noiseMat )
annotCLL<-c(annotCLL, rep("noise",nNoise))
table(annotCLL)
# Chunk 5
# noPCs<-30
# PCsCLLOmics<-lapply(CLLOmics[1:3], function(dat){
#     pc.out<-prcomp(dat)
#     dat<-pc.out$x[,1:noPCs]
# })
# sapply(PCsCLLOmics, dim)
# for(i in 1:length(PCsCLLOmics)) colnames(PCsCLLOmics[[i]])<-paste(colnames(PCsCLLOmics[[i]]), names(PCsCLLOmics)[i], sep="_")
# #join
# XCLL<-do.call(cbind, PCsCLLOmics)
# dim(XCLL)
# annotCLL<-rep(names(PCsCLLOmics), times=sapply(PCsCLLOmics, ncol))
#
# #include a noise group
# noiseMat<-matrix(rnorm(noPCs*nrow(XCLL)),nrow=nrow(XCLL), ncol=noPCs)
# colnames(noiseMat)<-paste("noise", 1:noPCs, sep="_")
# XCLL<-cbind(XCLL,noiseMat )
# annotCLL<-c(annotCLL, rep("noise", noPCs))
# Chunk 6
#replace by methylation cluster
meanMeth <- rowMeans(top_allViews$meth)
y <- as.matrix(meanMeth)
beta0 <- c(meth=1/length(meanMeth), mRNA=0, viab=0, noise=0)
beta0 <- beta0[annotCLL]
# Chunk 7
XCLL<-scale(XCLL)
p <- ncol(XCLL)
n <- ncol(XCLL)
# Chunk 8
# folds for splitting into test and train data
nfolds <- 10
foldid <- sample(rep(seq(nfolds), length=nrow(XCLL)))
resultList <- lapply(1:nfolds, function(foldidx){
#split in train and test data
set.seed(10213+foldidx)
testsamples<-sample(1:nrow(XCLL), round(0.1*nrow(XCLL)))
print(testsamples)
use4test <- foldid==foldidx
trainsamples <- (1:nrow(XCLL))[!use4test]
ytrain <- y[ !use4test,,drop=F ]
ytest <- y[use4test,,drop=F]
Xtrain <- XCLL[ !use4test,]
Xtest <- XCLL[use4test,]
#remove features without variaton in training data
toKeep<-apply(Xtrain,2,var)>0 & ! duplicated(t(Xtrain)) #& apply(1:ncol(Xtrain), function(c) all(abs(cor(XCLL)[c,-c]<0.9)))
Xtrain<-Xtrain[,toKeep]
Xtest<-Xtest[,toKeep]
annottmp<-annotCLL[toKeep]
print(paste("For prediciton of mean methylation there are ntrain=",dim(Xtrain)[1],
"ntest=",dim(Xtest)[1], "samples and",dim(Xtrain)[2], "features for training"))
table(annottmp)
#fit models
AllFits<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),
annot = annottmp, max_iter = 2000,
intercept = T, trueintercept = 0, beta0=beta0, compareGroupLasso = T,
plotit = F, standardize=T, verbose=F, compareGRridge = T,
freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)
pf_mat <- getPenaltyFactors(AllFits)
sparsity_mat <- getSparsityLevel(AllFits)
beta_mat <- getCoefficients(AllFits)
intercepts <- getIntercept(AllFits)
# Feature recvoery
df <- data.frame(beta_mat, S = AllFits$summaryList$grpRR_SS$out$EW_s, group = as.factor(annot), x = 1: p, true = beta_mat[,"TrueModel"] ==0)
ggplot(df, aes(x=x,y=grpRR_SS, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=grpRR_SScutoff, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=S, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=grpRR, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=TrueModel, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=Ridge, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=Lasso, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=ElasticNet, fill=true)) +geom_bar(stat = "identity")
#evaluate prediciton performance
AllFits <- evaluateFits(AllFits, Xtest=as.matrix(Xtest), ytest=ytest)
RMSE <- getRMSE(AllFits)
FNR <- getFNR(AllFits)
FPR <- getFPR(AllFits)
l1error_intercept <- getl1error_intercept(AllFits)
l1error_beta <- getl1error_beta(AllFits)
runtime <- getRunTime(AllFits)
#return list with all results
list(FPR=FPR, FNR=FNR, RMSE=RMSE, pf_mat=pf_mat, beta_mat=beta_mat,
l1error_intercept=l1error_intercept, l1error_beta=l1error_beta,
intercepts=intercepts, sparsity_mat=sparsity_mat, annot=AllFits$annot, runtime=runtime)
})
# Chunk 9
plotMethodComparison(resultList)
# Chunk 10
#
#
# par(mfrow=c(1,1))
# #produce plots
# ggMSE<-ggplot(PredPerfromDF, aes(x=method, fill=method, y=MSE))+geom_boxplot()+
#       theme(axis.text.x = element_text(angle = 60, hjust = 1))+ggtitle(paste("MSE - mean meth."))
# print(ggMSE)
#
# ggPF<-ggplot(PFDF, aes(x=group, fill=variable, y=value))+geom_boxplot()+
#       theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Penalty factors - mean meth"))+
#       facet_wrap(~variable, scales = "free_y")
# print(ggPF)
#
# ggbeta<-ggplot(betaDF, aes(x=FeatureNo, fill=group, y=value, group=FeatureNo))+
#           geom_bar(position = "dodge", stat = "summary", fun.y = "mean")+
#           theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("Mean estimated coefficients - mean meth")) +
#           facet_wrap(~variable, scales = "free_y")
# print(ggbeta)
#
# betDFon<-betaDF
# betDFon$value<-ifelse(betaDF$value==0,0,1)
# selectedDF<-dplyr::filter(betDFon, variable %in% c("beta_lasso", "beta_estSScutoff"))
# SelectedAtLeastOnce<-selectedDF$Feature[selectedDF$value>0]
# selectedDF<-filter(selectedDF, Feature %in%SelectedAtLeastOnce )
# ggSelected<-ggplot(selectedDF, aes(x=Feature, fill=group, y=value, group=FeatureNo))+
#           geom_bar(position = "dodge", stat = "summary", fun.y = "mean")+
#           theme(axis.text.x = element_text(angle = 60, hjust = 1)) +ggtitle(paste("On/Off of selected coefficients for sparse methods- mean meth")) +
#           facet_wrap(~variable, nrow=2)
# print(ggSelected)
# # dev.off()
# folds for splitting into test and train data
nfolds <- 10
foldid <- sample(rep(seq(nfolds), length=nrow(XCLL)))
resultList <- lapply(1:nfolds, function(foldidx){
#split in train and test data
set.seed(10213+foldidx)
testsamples<-sample(1:nrow(XCLL), round(0.1*nrow(XCLL)))
print(testsamples)
use4test <- foldid==foldidx
trainsamples <- (1:nrow(XCLL))[!use4test]
ytrain <- y[ !use4test,,drop=F ]
ytest <- y[use4test,,drop=F]
Xtrain <- XCLL[ !use4test,]
Xtest <- XCLL[use4test,]
#remove features without variaton in training data
toKeep<-apply(Xtrain,2,var)>0 & ! duplicated(t(Xtrain)) #& apply(1:ncol(Xtrain), function(c) all(abs(cor(XCLL)[c,-c]<0.9)))
Xtrain<-Xtrain[,toKeep]
Xtest<-Xtest[,toKeep]
annottmp<-annotCLL[toKeep]
print(paste("For prediciton of mean methylation there are ntrain=",dim(Xtrain)[1],
"ntest=",dim(Xtest)[1], "samples and",dim(Xtrain)[2], "features for training"))
table(annottmp)
#fit models
AllFits<-RunMethods(Xtrain = as.matrix(Xtrain), ytrain =as.vector(ytrain),
annot = annottmp, max_iter = 2000,
intercept = T, trueintercept = 0, beta0=beta0, compareGroupLasso = T,
plotit = F, standardize=T, verbose=F, compareGRridge = T,
freqELB = 3000, include_nonfacQ = T, includeRF = T, th = 1e-5)
pf_mat <- getPenaltyFactors(AllFits)
sparsity_mat <- getSparsityLevel(AllFits)
beta_mat <- getCoefficients(AllFits)
intercepts <- getIntercept(AllFits)
# Feature recvoery
df <- data.frame(beta_mat, S = AllFits$summaryList$grpRR_SS$out$EW_s, group = as.factor(annottmp), x = 1: p, true = beta_mat[,"TrueModel"] ==0)
ggplot(df, aes(x=x,y=grpRR_SS, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=grpRR_SScutoff, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=S, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=grpRR, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=TrueModel, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=Ridge, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=Lasso, fill=true)) +geom_bar(stat = "identity")
ggplot(df, aes(x=x,y=ElasticNet, fill=true)) +geom_bar(stat = "identity")
#evaluate prediciton performance
AllFits <- evaluateFits(AllFits, Xtest=as.matrix(Xtest), ytest=ytest)
RMSE <- getRMSE(AllFits)
FNR <- getFNR(AllFits)
FPR <- getFPR(AllFits)
l1error_intercept <- getl1error_intercept(AllFits)
l1error_beta <- getl1error_beta(AllFits)
runtime <- getRunTime(AllFits)
#return list with all results
list(FPR=FPR, FNR=FNR, RMSE=RMSE, pf_mat=pf_mat, beta_mat=beta_mat,
l1error_intercept=l1error_intercept, l1error_beta=l1error_beta,
intercepts=intercepts, sparsity_mat=sparsity_mat, annot=AllFits$annot, runtime=runtime)
})
