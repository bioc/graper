EvalOut_current
# seed for simulation of data - random but reproducible
set.seed(Sys.time())
rnd<-sample(1:1000000,1)
rnd
#simulate data from a linear model with uncorrelated normal simulated design
data <- simulateExplicit(ntotal,p,beta0, sigma2, rnd)
which4train<-1:ntrain
which4test<-(ntrain+1):ntotal
# run different methods on the training data
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 2000,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 1, verbose = T, th = 1e-4)
plot(ELB[[1]], xlim=c(30,300))
plot(ELB[[1]], xlim=c(100,300))
plot(ELB_FF[[1]], xlim=c(100,300))
plot(ELB_FF[[1]][100:300])
plot(ELB_FF[[1]][100:1000])
plot(ELB_FF[[1]][100:2000])
plot(ELB[[1]][100:2000])
plot(ELB_SS[[1]][100:2000])
PredPerfromDFcurrent
PFDFcurrent
,<-cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
PredPerfromDFcurrent
EvalOut_current$DFGroupPenalties
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
DFresult <- allFits$DFresult
EvalOut_current$DFGroupPenalties
PFDFcurrent
EvalOut_current
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
allFits <- AllFits
DFresult <- allFits$DFresult
DFresult
DFresult[1:10,1:10]
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
length(beta_lasso)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
GrpLassoFit<-try(grpreg::cv.grpreg(Xtrain, ytrain,
group=as.factor(annot), penalty="grLasso",
intercept=intercept, family=family))
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
pi_estSS
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 200,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
AllFits$coefficients
rbind(AllFits$coefficients, AllFits$penaltyFactors)
cbind(AllFits$coefficients, AllFits$penaltyFactors)
cbind(AllFits$coefficients, AllFits$penaltyFactors)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
coefficients
penaltyFactors <- AllFits$penaltyFactors
penaltyFactors
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 200,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
penaltyFactors <- AllFits$penaltyFactors
dfgp <- melt(penaltyFactors,id.vars = c("group"))
dfgp
penaltyFactors
penaltyFactors[,-5]
melt(penaltyFactors[,-5])
dfm <- melt(penaltyFactors[,-5])
dfm <- dfm[,!duplicated(dfm)]
dfm <- dfm[!duplicated(dfm),]
dfm
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 30,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 30,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 30,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
penaltyFactors <- AllFits$penaltyFactors
penaltyFactors
table(penaltyFactors$variable)
table(penaltyFactors$variable) ==5
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 30,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
penaltyFactors <- AllFits$penaltyFactors
ggrelPenal<-ggplot(penaltyFactors, aes(x=group, y=penaltyFactors, group=metho, fill=method))+geom_bar(stat="summary", position="dodge", fun.y="mean")+
ggtitle("Penalty factor per group") +facet_wrap(~variable, scales = "free_y")+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggrelPenal<-ggplot(penaltyFactors, aes(x=group, y=penaltyFactors, group=metho, fill=method))+geom_bar(stat="summary", position="dodge", fun.y="mean")+
ggtitle("Penalty factor per group") +facet_wrap(~method, scales = "free_y")+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggrelPenal
penaltyFactors
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
penaltyFactors <- AllFits$penaltyFactors
penaltyFactors
debugonce(RunMethods)
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
melt(penaltyFactors, variable.name = "method", value.name = "penalty_factor")
penaltyFactors2 <-penaltyFactors
penaltyFactors
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
penaltyFactors <- AllFits$penaltyFactors
penaltyFactors
ggrelPenal<-ggplot(penaltyFactors, aes(x=group, y=penaltyFactors, group=metho, fill=method))+geom_bar(stat="summary", position="dodge", fun.y="mean")+
ggtitle("Penalty factor per group") +facet_wrap(~method, scales = "free_y")+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggrelPenal
ggrelPenal<-ggplot(penaltyFactors, aes(x=group, y=penaltyFactors, group=method, fill=method))+geom_bar(stat="summary", position="dodge", fun.y="mean")+
ggtitle("Penalty factor per group") +facet_wrap(~method, scales = "free_y")+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggrelPenal
penaltyFactors
ggrelPenal<-ggplot(penaltyFactors, aes(x=group, y=penalty_factor, group=method, fill=method))+geom_bar(stat="summary", position="dodge", fun.y="mean")+
ggtitle("Penalty factor per group") +facet_wrap(~method, scales = "free_y")+
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggrelPenal
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
coefficients
coefficients <- AllFits$coefficients
coefficients
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
EvalOut_current <- evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = T)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
traceback()
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
EvalOut_current <- evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = T)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
allFits$coefficients$id
AllFits$coefficients$id
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
EvalOut_current <- evalResult(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test], plotit = T)
EvalOut_current
cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd, AllFits$penaltyFactors)
AllFits$penaltyFactors
cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd, filter(AllFits$penaltyFactors, group==1))
cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd,  filter(AllFits$penaltyFactors, group==1)$penaltyfactor)
cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd,  filter(AllFits$penaltyFactors, group==1)$penalty_factor)
cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd
lapply(unique(AllFits$penaltyFactors$group), function(gr) filter(AllFits$penaltyFactors, group==gr)$penalty_factor)
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
})
lapply(unique(AllFits$penaltyFactors$group), function(gr) filter(AllFits$penaltyFactors, group==gr)$penalty_factor)
lapply(unique(AllFits$penaltyFactors$group), function(gr) filter(AllFits$penaltyFactors, group==gr))
EvalOut_current$EvalDF
predPerfro m <- cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
Pfs <- lapply(unique(AllFits$penaltyFactors$group), function(gr) filter(AllFits$penaltyFactors, group==gr))
predPerform <- cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
Pfs <- lapply(unique(AllFits$penaltyFactors$group), function(gr) filter(AllFits$penaltyFactors, group==gr))
predPerform
Pfs
methods <- sub("beta_", "",unique(AllFits$penaltyFactors$method))
methods
methods <- sub("pf_", "",unique(AllFits$penaltyFactors$method))
methods
EvalOut_current$EvalDF,
predPerform <- cbind(EvalOut_current$EvalDF,  run =simNo, seed=rnd)
predPerform
methods <- sub("beta_", "",unique(predPerform$method))
methods
AllFits$penaltyFactors
groupwisePF <- lapply(unique(AllFits$penaltyFactors$group), function(gr) filter(AllFits$penaltyFactors, group==gr))
groupwisePF
methodwisePF <- lapply(unique(AllFits$penaltyFactors$method), function(m) filter(AllFits$penaltyFactors, method==m))
methodwisePF
names(methodwisePF) <- unique(AllFits$penaltyFactors$method)
methodwisePF
tmp <- filter(AllFits$penaltyFactors, method==m)
m <- "grpRR_SS"
tmp <- filter(AllFits$penaltyFactors, method==m)
melt(tmp)
tmp
AllFits$penaltyFactors
tmp <- filter(AllFits$penaltyFactors, grepl(m,method))
tmp
m <- "grpRR"
tmp <- filter(AllFits$penaltyFactors, grepl(m,method))
tmp
tmp <- filter(AllFits$penaltyFactors, grepl(paste(m,"$",sep=""),method))
tmp
melt(tmp)
methodwisePF <- lapply(unique(AllFits$penaltyFactors$method), function(m) {
tmp <- filter(AllFits$penaltyFactors, grepl(paste(m,"$",sep=""),method))
vec <- tmp$penalty_factor
names(vec) <- tmp$group
vec
})
methodwisePF
names(methodwisePF) <- unique(AllFits$penaltyFactors$method)
AllFits$penaltyFactors$method
methodwisePF <- lapply(unique(AllFits$penaltyFactors$method), function(m) {
tmp <- filter(AllFits$penaltyFactors, method==m))
vec <- tmp$penalty_factor
names(vec) <- tmp$group
vec
})
methodwisePF <- lapply(unique(AllFits$penaltyFactors$method), function(m) {
tmp <- filter(AllFits$penaltyFactors, method==m)
vec <- tmp$penalty_factor
names(vec) <- tmp$group
vec
})
methodwisePF
names(methodwisePF) <- unique(AllFits$penaltyFactors$method)
methodwisePF
methods <- sub("beta_", "",unique(predPerform$method))
methods <- paste(methods, "$", sep="")
methods
lapply(methods, function(m) cbind(predPerform[grepl(m,predPerform$method)], methodwisePF[grepl(m,predPerform$method)])
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
})
lapply(methods, function(m) cbind(predPerform[grepl(m,predPerform$method)], methodwisePF[grepl(m,predPerform$method)]))
m <- methods[1]
redPerform[grepl(m,predPerform$method)]
predPerform[grepl(m,predPerform$method)]
predPerform[grepl(m,predPerform$method),]
methodwisePF[grepl(m,predPerform$method)]
lapply(methods, function(m) cbind(predPerform[grepl(m,predPerform$method),], methodwisePF[[grepl(m,predPerform$method)]]))
methodwisePF[[grepl(m,predPerform$method)]]
methodwisePF[[grepl(m,names(methodwisePF)]]
methodwisePF[[grep(m,names(methodwisePF)]]
methodwisePF[[grep(m,names(methodwisePF))]]
cbind(predPerform[grepl(m,predPerform$method),], pf= methodwisePF[[grep(m,names(methodwisePF))]])
cbind(predPerform[grepl(m,predPerform$method),], pf= t(methodwisePF[[grep(m,names(methodwisePF))]]))
lapply(methods, function(m) cbind(predPerform[grepl(m,predPerform$method),], pf= t(methodwisePF[[grep(m,names(methodwisePF))]]))) %>% bind_rows()
methods
names(methodwisePF)
methods <- sub("beta_", "",unique(predPerform$method))
methods <- methods[methods!="zeromodel"]
methods <- paste(methods, "$", sep="")
lapply(methods, function(m) cbind(predPerform[grepl(m,predPerform$method),], pf= t(methodwisePF[[grep(m,names(methodwisePF))]]))) %>% bind_rows()
lapply(methods, function(m) {
print(m)
cbind(predPerform[grepl(m,predPerform$method),], pf= t(methodwisePF[[grep(m,names(methodwisePF))]]))
}) %>% bind_rows()
methods <- sub("beta", "",unique(predPerform$method))
methods <- methods[methods!="zeromodel"]
methods <- paste(methods, "$", sep="")
lapply(methods, function(m) {
print(m)
cbind(predPerform[grepl(m,predPerform$method),], pf= t(methodwisePF[[grep(m,names(methodwisePF))]]))
}) %>% bind_rows()
methods <- sub("beta", "",unique(predPerform$method))
methods <- methods[methods!="_zeromodel"]
methods <- paste(methods, "$", sep="")
lapply(methods, function(m) {
print(m)
cbind(predPerform[grepl(m,predPerform$method),], pf= t(methodwisePF[[grep(m,names(methodwisePF))]]))
}) %>% bind_rows()
methods
methods <- methods[methods%in% c("_zeromodel", "grpRR_SScutoff" ]
methods <- paste(methods, "$", sep="")
lapply(methods, function(m) {
print(m)
cbind(predPerform[grepl(m,predPerform$method),], pf= t(methodwisePF[[grep(m,names(methodwisePF))]]))
}) %>% bind_rows()
PFDFcurrent<-cbind(EvalOut_current$DFGroupPenalties,  run =simNo, seed=rnd)
PFDF<-rbind(PFDF, PFDFcurrent)
gamma_dense<-rbind(gamma_dense,as.numeric(AllFits$result$EW_gamma))
gamma_sparse<-rbind(gamma_sparse,as.numeric(AllFits$resultSS$EW_gamma))
pi_sparse<-rbind(pi_sparse, as.numeric(AllFits$resultSS$EW_pi))
})
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
debugonce(RunMethods)
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
grpRR
grpRR$EW_gamma
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
debugonce(RunMethods)
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
grpRR$intercept
grpRR_summary <- list()
grpRR_summary$runtime <- timeNF
grpRR_summary$pf <- grpRR$EW_gamma[annot]
grpRR_summary$beta <- grpRR$EW_beta
grpRR_summary$intercept <- grpRR$intercept
grpRR_summary$sparsity <- rep(1, length(beta_grpRR))
grpRR_summary <- list()
grpRR_summary$runtime <- timeNF
grpRR_summary$pf <- grpRR$EW_gamma
grpRR_summary$beta <- grpRR$EW_beta
grpRR_summary$intercept <- grpRR$intercept
grpRR_summary$sparsity <- rep(1, G)
grpRR_summary
grpRR$intercept
grpRR_summary$runtime
runtime
timeNF
as.numeric(timeNF)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
intercept =F
grpRR_FF<-fit_grpRR(Xtrain, ytrain, annot=annot, factoriseQ = T, spikeslab= F, max_iter = max_iter, intercept=intercept,
verbose = verbose, freqELB = freqELB, calcELB = calcELB, family = family, th=th)
grpRR_FF$intercept
outdir <- "~/Documents/MOFA/CLL_MOFA_data/out/imputation/FullCases/4Jul/"
fileList <- list.files(outdir)
fileList <- fileList[grepl(".hdf5", fileList]
listModels <- lapply(fileList, function (filenm) loadModel(file.path(outdir, filenm)))
names(listModels) <- sub(".hdf5","",fileList)
metModels <- names(listModels)[grepl("met",names(listModels))]
missing <- sapply(listModels[metModels], function(model) apply(is.na(model@TrainData$meth),2,all))
met <- apply(missing,2, function(c) names(which(c)))
exprModels <- names(listModels)[grepl("expr",names(listModels))]
missing <- sapply(listModels[exprModels], function(model) apply(is.na(model@TrainData$mut),2,all))
expr <- apply(missing,2, function(c) names(which(c)))
viabModels <- names(listModels)[grepl("viab",names(listModels))]
missing <- sapply(listModels[viabModels], function(model) apply(is.na(model@TrainData$viab),2,all))
viab <- apply(missing,2, function(c) names(which(c)))
outdir <- "~/Documents/MOFA/CLL_MOFA_data/out/imputation/FullCases/4Jul/"
fileList <- list.files(outdir)
fileList <- fileList[grepl(".hdf5", fileList]
listModels <- lapply(fileList, function (filenm) loadModel(file.path(outdir, filenm)))
names(listModels) <- sub(".hdf5","",fileList)
metModels <- names(listModels)[grepl("met",names(listModels))]
missing <- sapply(listModels[metModels], function(model) apply(is.na(model@TrainData$meth),2,all))
met <- apply(missing,2, function(c) names(which(c)))
exprModels <- names(listModels)[grepl("expr",names(listModels))]
missing <- sapply(listModels[exprModels], function(model) apply(is.na(model@TrainData$mut),2,all))
expr <- apply(missing,2, function(c) names(which(c)))
viabModels <- names(listModels)[grepl("viab",names(listModels))]
missing <- sapply(listModels[viabModels], function(model) apply(is.na(model@TrainData$viab),2,all))
viab <- apply(missing,2, function(c) names(which(c)))
listModels <- lapply(fileList, function (filenm) loadModel(file.path(outdir, filenm)))
setwd("/Users/bvelten/Documents/MOFA/CLL_MOFA_data/Analysis/code4manuscript/")
devtools::load_all("/Users/bvelten/Documents/MOFA/MOFApackage/scGFA/MOFAtools/")
# library(MOFAtools)
library(dplyr)
library(reshape2)
library(pheatmap)
library(survival)
library(gridExtra)
library(ggplot2)
library(GGally)
library(magrittr)
library(Hmisc)
# library(pace)
outdir <- "~/Documents/MOFA/CLL_MOFA_data/out/imputation/FullCases/4Jul/"
fileList <- list.files(outdir)
fileList <- fileList[grepl(".hdf5", fileList]
listModels <- lapply(fileList, function (filenm) loadModel(file.path(outdir, filenm)))
names(listModels) <- sub(".hdf5","",fileList)
outdir <- "~/Documents/MOFA/CLL_MOFA_data/out/imputation/FullCases/4Jul/"
fileList <- list.files(outdir)
fileList <- fileList[grepl(".hdf5", fileList]
listModels <- lapply(fileList, function (filenm) loadModel(file.path(outdir, filenm)))
names(listModels) <- sub(".hdf5","",fileList)
metModels <- names(listModels)[grepl("met",names(listModels))]
missing <- sapply(listModels[metModels], function(model) apply(is.na(model@TrainData$meth),2,all))
met <- apply(missing,2, function(c) names(which(c)))
mutModels <- names(listModels)[grepl("mut",names(listModels))]
missing <- sapply(listModels[mutModels], function(model) apply(is.na(model@TrainData$mut),2,all))
mut <- apply(missing,2, function(c) names(which(c)))
viabModels <- names(listModels)[grepl("viab",names(listModels))]
missing <- sapply(listModels[viabModels], function(model) apply(is.na(model@TrainData$viab),2,all))
viab <- apply(missing,2, function(c) names(which(c)))
met
mut <- apply(missing,2, function(c) sort(names(which(c))))
mut
mut[[1]]
met <- apply(missing,2, function(c) sort(names(which(c))))
viab <- apply(missing,2, function(c) sort(names(which(c))))
viab[[1]]
names(listModels)
mRNAModels <- names(listModels)[grepl("mRNA",names(listModels))]
missing <- sapply(listModels[mRNAModels], function(model) apply(is.na(model@TrainData$mRNA),2,all))
mRNA <- apply(missing,2, function(c) sort(names(which(c))))
mRNA[[1]]
debugonce(RunMethods)
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
debugonce(RunMethods)
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = 5,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T, freqELB = 3000, verbose = T)
beta_lasso
annot
sapply(1:G, sum(beta_lasso[annot==gr]==0))
sapply(1:G, function(gr) sum(beta_lasso[annot==gr]==0))
sapply(1:G, function(gr) sum(beta_lasso[annot==gr]==0)/sum(annot==gr))
sapply(1:G, function(gr) sum(beta_lasso[annot==gr]!=0)/sum(annot==gr))
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
if(includeRF) rf.out <- randomForest(x = Xtrain, y = ytrain)
rf.out
rf.out <- randomForest(x = Xtrain, y = ytrain)
rf.out
rf.out$coefs
?randomForest
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
order(rep(1:10, each=5))
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
order(rep(1:10, each=5)) == 1:50
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
GrpLassoFit <- try(grpreg::cv.grpreg(Xtrain, ytrain,
group=as.factor(annot), penalty="grLasso",
intercept=intercept, family=family))
GrpLassoFit$lambda.min
coef(GrpLassoFit,GrpLassoFit$lambda.min)
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
partition<-CreatePartition(as.factor(annot))
if(intercept) MessagesGR <- capture.output(GRfit <- try(grridge(t(Xtrain), as.numeric(ytrain), list(partition), unpenal=~1)))
GRfit
tmp<-Sys.time()
partition<-CreatePartition(as.factor(annot))
if(intercept) MessagesGR <- capture.output(GRfit <- try(grridge(t(Xtrain), as.numeric(ytrain), list(partition), unpenal=~1)))
else MessagesGR<-capture.output(GRfit <- try(grridge(t(Xtrain), as.numeric(ytrain), list(partition), unpenal=~0)))
tmp <- Sys.time()-tmp
GRfit
tmp<-Sys.time()
partition<-CreatePartition(as.factor(annot))
if(intercept) MessagesGR <- capture.output(GRfit <- try(grridge(t(Xtrain), as.numeric(ytrain), list(partition), unpenal=~1)))else MessagesGR<-capture.output(GRfit <- try(grridge(t(Xtrain), as.numeric(ytrain), list(partition), unpenal=~0)))
tmp <- Sys.time()-tmp
GRfit
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
tmp<-Sys.time()
partition<-CreatePartition(as.factor(annot))
if(intercept) MessagesGR <- capture.output(GRfit <- try(grridge(t(Xtrain), as.numeric(ytrain), list(partition), unpenal=~1)))
else MessagesGR<-capture.output(GRfit <- try(grridge(t(Xtrain), as.numeric(ytrain), list(partition), unpenal=~0)))
tmp <- Sys.time()-tmp
intercept
partition<-CreatePartition(as.factor(annot))
GRfit <- try(grridge(t(Xtrain), as.numeric(ytrain), list(partition), unpenal=~1)
)
GRfit$lambda
GRfit$lambdamults
GRfit$lambdamults[[1]]
GRfit$betas
length(GRfit$betas)
GRfit$predobj$GroupRegul@unpenalized
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
ls()
grepl("_summary", ls())
ls()[grepl("_summary", ls())]
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
source('~/Documents/LassoVariants/multiviewHDR/grpRR/R/evaluation_functions.R')
