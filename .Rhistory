gamma <- c(a=1000,b=10,c=0.5,d=1,e=0.1)
repeats <- 2
# Repeat simulation and fitting of different methods
# outer loop for repetitions of simulation and training
#resultList <- lapply(1:repeats, function(simNo){
resultList <- lapply(1:repeats, function(simNo){
# seed for simulation of data - random but reproducible
set.seed(Sys.time()+simNo)
rnd<-sample(1:1000000,1)
rnd
# coefficients
beta0 <- sapply(annot, function(i) rnorm(1,0,1/gamma[annot]))
#simulate data from a linear model with uncorrelated normal simulated design
data <- simulateExplicit(ntotal,p,beta0, sigma2, rnd)
which4train<-1:ntrain
which4test<-(ntrain+1):ntotal
# run different methods on the training data
AllFits <- RunMethods(Xtrain = data$X[which4train,], ytrain = data$y[which4train], annot = annot, max_iter = max_iter,
intercept = T, trueintercept = 0, beta0=beta0, plotit=F, standardize = T, includeRF = T, compareGRridge = T,
freqELB = max_iter+1, verbose = F, compareIPF = F)
pf_mat <- getPenaltyFactors(AllFits)
sparsity_mat <- getSparsityLevel(AllFits)
beta_mat <- getCoefficients(AllFits)
intercepts <- getIntercept(AllFits)
# evaluate results on test data
AllFits <- evaluateFits(AllFits, Xtest=data$X[which4test,], ytest=data$y[which4test])
RMSE <- getRMSE(AllFits)
FNR <- getFNR(AllFits)
FPR <- getFPR(AllFits)
l1error_intercept <- getl1error_intercept(AllFits)
l1error_beta <- getl1error_beta(AllFits)
runtime <- getRunTime(AllFits)
#return list with all results
list(FPR=FPR, FNR=FNR, RMSE=RMSE, pf_mat=pf_mat, beta_mat=beta_mat,
l1error_intercept=l1error_intercept, l1error_beta=l1error_beta,
intercepts=intercepts, sparsity_mat=sparsity_mat, annot=AllFits$annot, runtime=runtime)
})
# save(resultList, file = paste("results_setting5","n",ntrain ,"p",p,"G",G,"sigma2",sigma2,"gamma",paste(gamma, collapse = ","),".RData", sep="_"))
# Plot results
# pdf(paste("results_setting5","n",ntrain ,"p",p,"G",G,"sigma2",sigma2,"gamma",paste(gamma, collapse = ","),".pdf", sep="_"))
plotMethodComparison(resultList)
# dev.off()
# }
devtools::document("~/Documents/LassoVariants/multiviewHDR/grpRR/")
?fit_grpRR
devtools::load_all("~/Documents/LassoVariants/multiviewHDR/grpRR/")
?fit_grpRR
/?fit_grpRR
?RunMethods
library(reshape2)
library(dplyr)
library(ggplot2)
library(plyr)
knitr::opts_chunk$set(fig.path = "figures/")
setwd("~/Documents/LassoVariants/multiviewHDR/Analysis/Simulation/Setting_6")
indirs <- c(
indir1 = "~/Documents/LassoVariants/multiviewHDR/Analysis/Simulation/Setting_6/out_server/setting6/Scalability_p")
files <- lapply(indirs,list.files)
files <-  lapply(files, function(filelist) filelist[grepl(".RData", filelist)])
paths <- lapply(1:length(indirs), function(i) paste(indirs[i], files[[i]], sep="/"))
files <- do.call(c, files)
paths <- do.call(c, paths)
allResults <- lapply(paths, function(path) {
load(path)
resultList
})
names(allResults) <- sub(".RData", "",files)
G <- as.numeric(unique(sapply(strsplit(files, "_"), function(l) l[8])))
stopifnot(length(G)==1)
#true betas and check only one scenario for plots
gammas <-  unique(sapply(strsplit(files, "_"), function(l) l[12]))
stopifnot(length(gammas)==1)
truegammas <- rep(as.numeric(gammas), G)
#true sparsities and check only one scenario for plots
truesparsities <-  rep(0, length(truegammas))
# in one run something went wrong?
Iswrong <- sapply(allResults, function(l) any(sapply(l,is.null)))
allResults <- allResults[!Iswrong]
# get run times
time_all <- lapply(names(allResults), function(nm){
outerlist <- allResults[[nm]]
# sapply does not work in cases with some method droping out, need rbind.fill to fill up with NAs
time_summary <- melt(rbind.fill(lapply(seq_along(outerlist), function(run){
l <- outerlist[[run]]
df <- data.frame(t(l$runtime))
df$run <- run
df
})), variable.name = "method", value.name = "time", id.vars="run")
time_summary$method <- as.character(time_summary$method)
time_summary$p <- as.numeric(strsplit(nm, "_")[[1]][6])
time_summary$n <- as.numeric(strsplit(nm, "_")[[1]][4])
time_summary$sigma2 <- as.numeric(strsplit(nm, "_")[[1]][10])
time_summary
}) %>% bind_rows()
# get prediction and feature selection properties
eval_all <- lapply(names(allResults), function(nm){
outerlist <- allResults[[nm]]
eval_summary <- melt(lapply(outerlist, function(l) rbind(FPR=l$FPR, FNR=l$FNR, RMSE=l$RMSE,
l1error_beta=l$l1error_beta)),
varnames=c("measure","method"), level="run")
eval_summary$p <- as.numeric(strsplit(nm, "_")[[1]][6])
eval_summary$n <- as.numeric(strsplit(nm, "_")[[1]][4])
eval_summary$sigma2 <- as.numeric(strsplit(nm, "_")[[1]][10])
eval_summary
}) %>% bind_rows()
# get penalty matrix
pf_all <- lapply(names(allResults), function(nm){
outerlist <- allResults[[nm]]
pf_summary <- melt(lapply(outerlist, function(l) l$pf_mat),
varnames=c("group","method"), level="run")
pf_summary$p <- as.numeric(strsplit(nm, "_")[[1]][6])
pf_summary$n <- as.numeric(strsplit(nm, "_")[[1]][4])
pf_summary$sigma2 <- as.numeric(strsplit(nm, "_")[[1]][10])
pf_summary
}) %>% bind_rows()
sparsity_all <- lapply(names(allResults), function(nm){
outerlist <- allResults[[nm]]
pf_summary <- melt(lapply(outerlist, function(l) l$sparsity),
varnames=c("group","method"), level="run")
pf_summary$p <- as.numeric(strsplit(nm, "_")[[1]][6])
pf_summary$n <- as.numeric(strsplit(nm, "_")[[1]][4])
pf_summary$sigma2 <- as.numeric(strsplit(nm, "_")[[1]][10])
pf_summary
}) %>% bind_rows()
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(1000) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel", 1/(truebetas[df$group])^2,value))
df$group <- as.factor(df$group)
df$method[df$method=="grpRR"] <- "HB"
df
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(2000) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel", 1/(truebetas[df$group])^2,value))
df$group <- as.factor(df$group)
df$method[df$method=="grpRR"] <- "HB"
pf_all
unique(pf_all$p)
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(750) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel", 1/(truebetas[df$group])^2,value))
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(750) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$method[df$method=="grpRR"] <- "HB"
df
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(750) )
df
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$group
df$method[df$method=="grpRR"] <- "HB"
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(750) )
df$method=="grpRR"
df$method[df$method=="grpRR"]
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(750) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$plabel = factor(paste("p=",df$p, sep=""), levels = unique(paste("p=",sort(df$p), sep="")))
pdf("PF_s6.pdf", width=5, height=4)
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=2,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
dev.off()
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=2,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(250) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$plabel = factor(paste("p=",df$p, sep=""), levels = unique(paste("p=",sort(df$p), sep="")))
pdf("PF_s6.pdf", width=5, height=4)
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=2,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
dev.off()
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=2,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(50) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$plabel = factor(paste("p=",df$p, sep=""), levels = unique(paste("p=",sort(df$p), sep="")))
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=2,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
df <- filter(eval_all, measure=="RMSE", n==100, sigma2 == 0.5, method %in% c("grpRR","GRridge", "Ridge", "Lasso", "ElasticNet", "GroupLasso"), p %in% c(750))
df$plabel <- paste("p=",df$p, sep="")
df$plabel <- factor(df$plabel, levels = paste("p=",sort(unique(eval_all$p)), sep=""))
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df <- filter(eval_all, measure=="RMSE", n==100, sigma2 == 0.5, method %in% c("grpRR","GRridge", "Ridge", "Lasso", "ElasticNet", "GroupLasso"), p %in% c(750))
df$plabel <- paste("p=",df$p, sep="")
df$plabel <- factor(df$plabel, levels = paste("p=",sort(unique(eval_all$p)), sep=""))
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$method[df$method=="grpRR_SS"] <- "HB_sparse"
df$method <- factor(df$method, levels=c("HB", "GRridge","Ridge", "ElasticNet","Lasso", "GroupLasso"))
df$RMSE <- df$value
pdf("RMSE_s6.pdf", width = 5, height = 5)
gg_RMSE <- ggplot(df,aes(x=method, y= RMSE, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Prediction error") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_RMSE
gg_RMSE <- gg_RMSE +guides(fill=F)
dev.off()
gg_RMSE <- ggplot(df,aes(x=method, y= RMSE, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Prediction error") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_RMSE
df <- filter(eval_all, measure=="l1error_beta", n==100, sigma2 == 0.5, method %in% c("grpRR", "GRridge","Ridge", "Lasso", "ElasticNet", "GroupLasso"), p %in% c(750))
df$plabel <- paste("p=",df$p, sep="")
df$plabel <- factor(df$plabel, levels = paste("p=",sort(unique(eval_all$p)), sep=""))
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$method[df$method=="grpRR_SS"] <- "HB_sparse"
df$method <- factor(df$method, levels=c("HB", "GRridge","Ridge", "ElasticNet","Lasso", "GroupLasso"))
df$absolute_error <- df$value
gg_beta <- ggplot(df,aes(x=method, y= absolute_error, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Error on model coefficients") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_beta
pdf("l1_beta_s6.pdf", width = 5, height = 5)
gg_beta <- ggplot(df,aes(x=method, y= absolute_error, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Error on model coefficients") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_beta
dev.off()
df <- filter(eval_all, measure=="RMSE", n==100, sigma2 == 0.5, method %in% c("grpRR","GRridge", "Ridge", "Lasso", "ElasticNet", "GroupLasso"), p %in% c(3000))
df$plabel <- paste("p=",df$p, sep="")
df$plabel <- factor(df$plabel, levels = paste("p=",sort(unique(eval_all$p)), sep=""))
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$method[df$method=="grpRR_SS"] <- "HB_sparse"
df$method <- factor(df$method, levels=c("HB", "GRridge","Ridge", "ElasticNet","Lasso", "GroupLasso"))
df$RMSE <- df$value
gg_RMSE <- ggplot(df,aes(x=method, y= RMSE, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Prediction error") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_RMSE <- ggplot(df,aes(x=method, y= RMSE, group=method,fill=method)) +
geom_boxplot() +facet_wrap(~plabel, scales = "free_y") +
ggtitle("Prediction error") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_RMSE
eval_all$p
unique(eval_all$p)
df <- filter(eval_all, measure=="RMSE", n==100, sigma2 == 0.5, method %in% c("grpRR","GRridge", "Ridge", "Lasso", "ElasticNet", "GroupLasso"), p %in% c(500))
df$plabel <- paste("p=",df$p, sep="")
df$plabel <- factor(df$plabel, levels = paste("p=",sort(unique(eval_all$p)), sep=""))
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$method[df$method=="grpRR_SS"] <- "HB_sparse"
df$method <- factor(df$method, levels=c("HB", "GRridge","Ridge", "ElasticNet","Lasso", "GroupLasso"))
df$RMSE <- df$value
gg_RMSE <- ggplot(df,aes(x=method, y= RMSE, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Prediction error") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_RMSE
df <- filter(eval_all, measure=="RMSE", n==100, sigma2 == 0.5, method %in% c("grpRR","GRridge", "Ridge", "Lasso", "ElasticNet", "GroupLasso"), p %in% c(4000))
df$plabel <- paste("p=",df$p, sep="")
df$plabel <- factor(df$plabel, levels = paste("p=",sort(unique(eval_all$p)), sep=""))
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$method[df$method=="grpRR_SS"] <- "HB_sparse"
df$method <- factor(df$method, levels=c("HB", "GRridge","Ridge", "ElasticNet","Lasso", "GroupLasso"))
df$RMSE <- df$value
gg_RMSE <- ggplot(df,aes(x=method, y= RMSE, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Prediction error") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_RMSE
df <- filter(eval_all, measure=="RMSE", n==100, sigma2 == 0.5, method %in% c("grpRR","GRridge", "Ridge", "Lasso", "ElasticNet", "GroupLasso"), p %in% c(750))
df$plabel <- paste("p=",df$p, sep="")
df$plabel <- factor(df$plabel, levels = paste("p=",sort(unique(eval_all$p)), sep=""))
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$method[df$method=="grpRR_SS"] <- "HB_sparse"
df$method <- factor(df$method, levels=c("HB", "GRridge","Ridge", "ElasticNet","Lasso", "GroupLasso"))
df$RMSE <- df$value
pdf("RMSE_s6.pdf", width = 5, height = 5)
gg_RMSE <- ggplot(df,aes(x=method, y= RMSE, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Prediction error") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_RMSE
gg_RMSE <- gg_RMSE +guides(fill=F)
dev.off()
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR", "TrueModel"),
p %in% c(750) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$plabel = factor(paste("p=",df$p, sep=""), levels = unique(paste("p=",sort(df$p), sep="")))
pdf("PF_s6.pdf", width=5, height=4)
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=2,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
dev.off()
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=2,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
df <- filter(eval_all, measure=="l1error_beta", n==100, sigma2 == 0.5, method %in% c("grpRR", "GRridge","Ridge", "Lasso", "ElasticNet", "GroupLasso"), p %in% c(750))
df$plabel <- paste("p=",df$p, sep="")
df$plabel <- factor(df$plabel, levels = paste("p=",sort(unique(eval_all$p)), sep=""))
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$method[df$method=="grpRR_SS"] <- "HB_sparse"
df$method <- factor(df$method, levels=c("HB", "GRridge","Ridge", "ElasticNet","Lasso", "GroupLasso"))
df$absolute_error <- df$value
pdf("l1_beta_s6.pdf", width = 5, height = 5)
gg_beta <- ggplot(df,aes(x=method, y= absolute_error, group=method,fill=method)) +
geom_boxplot() +#facet_wrap(~plabel, scales = "free_y") +
ggtitle("Error on model coefficients") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
text = element_text(size=18))
gg_beta
dev.off()
grid.arrange( gg_RMSE,gg_beta, ncol=2,widths =c(4,6) )
gridExtra::grid.arrange( gg_RMSE,gg_beta, ncol=2,widths =c(4,6) )
pdf("joint_s6.pdf",width=10, height=5)
gridExtra::grid.arrange( gg_RMSE,gg_beta, ncol=2,widths =c(4,6) )
dev.off()
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR","grpRR_FF" "TrueModel"),
p %in% c(750) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR","grpRR_FF", "TrueModel"),
p %in% c(750) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$plabel = factor(paste("p=",df$p, sep=""), levels = unique(paste("p=",sort(df$p), sep="")))
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=2,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=3,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
df <- filter(pf_all, n==100, sigma2==0.5,
method %in% c("grpRR","grpRR_FF", "TrueModel"),
p %in% c(50, 100,250,750, 3000) )
df <- df %>% plyr::mutate(value= ifelse(method=="TrueModel",truegammas[df$group],value))
df$group <- as.factor(df$group)
df$method <- as.character(df$method)
df$method[df$method=="grpRR"] <- "HB"
df$method[df$method=="grpRR_FF"] <- "HB_fast"
df$plabel = factor(paste("p=",df$p, sep=""), levels = unique(paste("p=",sort(df$p), sep="")))
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(~method, ncol=3,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
ggplot(df, aes(x=group, y=value, group=group)) + facet_wrap(plabel~method, ncol=3,scales="fixed") +
ylab("Penalty factor per group") + ggtitle("Penalty Factors (log. scale)") +geom_boxplot(fill="forestgreen") + scale_y_log10()+
theme(text = element_text(size=18))
library(grpRR)
devtools::load_all(".")
devtools::load_all("~/Documents/LassoVariants/grpRR_model/grpRR/")
data <- makeExampleData()
data$n
fit <- fit_grpRR(data$X, data$y, data$annot)
plotELBO(fit)
plotPosterior(fit, "gamma")
plotPosterior(fit, "gamma", gamma0 = data$gammas)
plotPosterior(fit, "gamma", gamma0 = data$gammas, range = c(0,100))
plotPosterior(fit, "gamma", gamma0 = data$gammas, range = c(0,300))
data <- makeExampleData(n = 300, p=800)
fit <- fit_grpRR(data$X, data$y, data$annot)
plotELBO(fit)
plotPosterior(fit, "gamma", gamma0 = data$gammas, range = c(0,300))
plotPosterior(fit, "gamma", gamma0 = data$gammas)
plotPosterior(fit, "pi", pi0 =  = data$pis)
plotPosterior(fit, "pi", pi0 = data$pis)
fit$EW_beta
beta <- fit$EW_beta
head(beta)
?runMethods
fit <- fit_grpRR(data$X, data$y, data$annot, n_rep=3)
plotELBO(fit)
plotPosterior(fit, "gamma", gamma0 = data$gammas)
plotPosterior(fit, "pi", pi0 = data$pis)
beta <- fit$EW_beta
head(beta)
intercept <- fit$intercept
intercept
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE)
devtools::load_all("~/Documents/LassoVariants/grpRR_model/grpRR/")
plotMethodComparison(comp)
plotMethodComparison_plot(comp)
plotMethodComparison_plot(comp, methods2plot = c("grpRR_SS", "Lasso"))
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "Lasso"))
devtools::load_all("~/Documents/LassoVariants/grpRR_model/grpRR/")
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "Lasso"))
comp[[1]]$FPR
comp[[1]]$FNR
devtools::load_all("~/Documents/LassoVariants/grpRR_model/grpRR/")
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "Lasso"))
devtools::load_all("~/Documents/LassoVariants/grpRR_model/grpRR/")
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "Lasso"))
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "GRridge"))
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "IPFLasso"))
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "Lasso"))
fitMCMC <- fit_by_MCMC(data$X, data$y, data$annot)
data <- makeExampleData(n = 300, p=400, g=4,
pis=c(0.05,0.1,0.05,0.1), gammas=c(0.1,0.1,10,10))
fit <- fit_grpRR(data$X, data$y, data$annot, n_rep=3)
plotELBO(fit)
plotPosterior(fit, "gamma", gamma0 = data$gammas)
plotPosterior(fit, "pi", pi0 = data$pis)
beta <- fit$EW_beta
head(beta)
intercept <- fit$intercept
fitMCMC <- fit_by_MCMC(data$X, data$y, data$annot)
data <- makeExampleData(n = 500, p=800, g=4,
pis=c(0.05,0.1,0.05,0.1), gammas=c(0.1,0.1,10,10))
fit <- fit_grpRR(data$X, data$y, data$annot, n_rep=3)
plotELBO(fit)
plotPosterior(fit, "gamma", gamma0 = data$gammas)
plotPosterior(fit, "pi", pi0 = data$pis)
plotPosterior(fit, "gamma", gamma0 = data$gammas)
plotPosterior(fit, "gamma", gamma0 = data$gammas, range=c(-,30))
plotPosterior(fit, "gamma", gamma0 = data$gammas, range=c(0,30))
plotPosterior(fit, "gamma", gamma0 = data$gammas, range=c(0,20))
plotPosterior(fit, "pi", pi0 = data$pis)
beta <- fit$EW_beta
head(beta)
intercept <- fit$intercept
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE)
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "Lasso"))
intercept
qplot(beta, data$beta)
debugonce(fit_by_MCMC)
fit_by_MCMC(data$X, data$y, data$annot)
?fit_grpRR
getRMSE(comp)
getRMSE(comp[[1]])
data <- makeExampleData(n = 200, p=800, g=4,
pis=c(0.5,0.1,0.5,0.1), gammas=c(0.1,0.1,10,10))
fit <- fit_grpRR(data$X, data$y, data$annot,
n_rep=3, verbose = FALSE, th = 0.001)
# get coefficients
beta <- fit$EW_beta
# plot estimated versus true beta
qplot(beta, data$beta)
comp <- cv_compare(data$X, data$y, data$annot,
compareIPF=FALSE, compareGroupLasso=FALSE,
compareSparseGroupLasso=FALSE, includeRF=FALSE,
nfolds = 3, plot_cv = FALSE, verbose=FALSE)
plotMethodComparison(comp, methods2plot = c("grpRR_SS", "Lasso"))
